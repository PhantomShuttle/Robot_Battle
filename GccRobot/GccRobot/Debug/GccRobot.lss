
GccRobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000632  00800100  000016d0  00001764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800732  00800732  00001d96  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d96  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00001dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019da  00000000  00000000  00001ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003db  00000000  00000000  00003898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d4  00000000  00000000  00003c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  00004248  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ee  00000000  00000000  00004618  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002824  00000000  00000000  00004a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  0000722a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
       4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 81 02 	jmp	0x502	; 0x502 <__vector_13>
      38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      68:	da 02       	muls	r29, r26
      6a:	ee 02       	muls	r30, r30
      6c:	00 03       	mulsu	r16, r16
      6e:	14 03       	mulsu	r17, r20
      70:	26 03       	mulsu	r18, r22
      72:	3a 03       	fmul	r19, r18
      74:	4c 03       	fmul	r20, r20
      76:	60 03       	mulsu	r22, r16
      78:	72 03       	mulsu	r23, r18
      7a:	86 03       	fmuls	r16, r22
      7c:	98 03       	fmulsu	r17, r16
      7e:	ac 03       	fmulsu	r18, r20
      80:	be 03       	fmulsu	r19, r22
      82:	d2 03       	fmuls	r21, r18
      84:	ad 02       	muls	r26, r29
      86:	c1 02       	muls	r28, r17

00000088 <__ctors_end>:
      88:	11 24       	eor	r1, r1
      8a:	1f be       	out	0x3f, r1	; 63
      8c:	cf ef       	ldi	r28, 0xFF	; 255
      8e:	d8 e0       	ldi	r29, 0x08	; 8
      90:	de bf       	out	0x3e, r29	; 62
      92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
      94:	17 e0       	ldi	r17, 0x07	; 7
      96:	a0 e0       	ldi	r26, 0x00	; 0
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	e0 ed       	ldi	r30, 0xD0	; 208
      9c:	f6 e1       	ldi	r31, 0x16	; 22
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
      a0:	05 90       	lpm	r0, Z+
      a2:	0d 92       	st	X+, r0
      a4:	a2 33       	cpi	r26, 0x32	; 50
      a6:	b1 07       	cpc	r27, r17
      a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
      aa:	27 e0       	ldi	r18, 0x07	; 7
      ac:	a2 e3       	ldi	r26, 0x32	; 50
      ae:	b7 e0       	ldi	r27, 0x07	; 7
      b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
      b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
      b4:	a4 34       	cpi	r26, 0x44	; 68
      b6:	b2 07       	cpc	r27, r18
      b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
      ba:	0e 94 6a 07 	call	0xed4	; 0xed4 <main>
      be:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <_exit>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <OledWriteByte>:
	Digit=Digit-d3*10;
	d4=Digit%10;
	
	xianshi1(d0,y,x+6+i);
	xianshi1(d1,y,x+(6+i)*2);
	xianshi1(d2,y,x+(6+i)*3);
      c6:	61 30       	cpi	r22, 0x01	; 1
      c8:	89 f0       	breq	.+34     	; 0xec <OledWriteByte+0x26>
      ca:	40 98       	cbi	0x08, 0	; 8
      cc:	98 e0       	ldi	r25, 0x08	; 8
      ce:	05 c0       	rjmp	.+10     	; 0xda <OledWriteByte+0x14>
	xianshi1(d3,y,x+(6+i)*4);
      d0:	42 98       	cbi	0x08, 2	; 8
      d2:	43 9a       	sbi	0x08, 3	; 8
      d4:	88 0f       	add	r24, r24
      d6:	91 50       	subi	r25, 0x01	; 1
      d8:	41 f0       	breq	.+16     	; 0xea <OledWriteByte+0x24>
      da:	43 98       	cbi	0x08, 3	; 8
	xianshi1(d4,y,x+(6+i)*5);
      dc:	87 ff       	sbrs	r24, 7
      de:	f8 cf       	rjmp	.-16     	; 0xd0 <OledWriteByte+0xa>
	d1=Digit/1000;
	Digit=Digit-d1*1000;
	d2=Digit/100;
	Digit=Digit-d2*100;
	d3=Digit/10;
	Digit=Digit-d3*10;
      e0:	42 9a       	sbi	0x08, 2	; 8
      e2:	43 9a       	sbi	0x08, 3	; 8
      e4:	88 0f       	add	r24, r24
      e6:	91 50       	subi	r25, 0x01	; 1
      e8:	c1 f7       	brne	.-16     	; 0xda <OledWriteByte+0x14>
      ea:	08 95       	ret
      ec:	40 9a       	sbi	0x08, 0	; 8
      ee:	ee cf       	rjmp	.-36     	; 0xcc <OledWriteByte+0x6>

000000f0 <OledClearn>:
      f0:	cf 93       	push	r28
	d4=Digit%10;
      f2:	df 93       	push	r29
      f4:	d0 eb       	ldi	r29, 0xB0	; 176
      f6:	60 e0       	ldi	r22, 0x00	; 0
	
	xianshi1(d0,y,x+6+i);
	xianshi1(d1,y,x+(6+i)*2);
	xianshi1(d2,y,x+(6+i)*3);
	xianshi1(d3,y,x+(6+i)*4);
	xianshi1(d4,y,x+(6+i)*5);
      f8:	8d 2f       	mov	r24, r29
}
      fa:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
     106:	60 e0       	ldi	r22, 0x00	; 0
     108:	80 e1       	ldi	r24, 0x10	; 16
     10a:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
     10e:	c0 e0       	ldi	r28, 0x00	; 0
     110:	61 e0       	ldi	r22, 0x01	; 1
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
     118:	cf 5f       	subi	r28, 0xFF	; 255
	
	xianshi1(d0,y,x+6+i);
	xianshi1(d1,y,x+(6+i)*2);
	xianshi1(d2,y,x+(6+i)*3);
	xianshi1(d3,y,x+(6+i)*4);
	xianshi1(d4,y,x+(6+i)*5);
     11a:	c0 38       	cpi	r28, 0x80	; 128
     11c:	c9 f7       	brne	.-14     	; 0x110 <OledClearn+0x20>
	xianshi1(d4,y,x+(6+i)*4);
}
void Cache_MDigit5_int(int Digit,char y,char x,char i )//5位数 y0-7 x0-127
{int d0,d1,d2,d3,d4;
	if (Digit<0)
	{xianshi1(-3,y,x);
     11e:	df 5f       	subi	r29, 0xFF	; 255
     120:	d8 3b       	cpi	r29, 0xB8	; 184
     122:	49 f7       	brne	.-46     	; 0xf6 <OledClearn+0x6>
		Digit=-Digit;
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <OledInit>:
     12a:	41 98       	cbi	0x08, 1	; 8
{
	/*OLED复位*/
	OLED_SPI_RST_L;
	//OLED_SPI_RST=0;
	delay_1us();
	OLED_SPI_RST_H;
     12c:	41 9a       	sbi	0x08, 1	; 8
	//OLED_SPI_RST=1;
	delay_1us();

	/*关闭OLED显示*/
	OledWriteByte(SET_DISPLAY_OFF,OLED_CMD);
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	8e ea       	ldi	r24, 0xAE	; 174
     132:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	
	/*设置正当频率、时钟分频因子*/
	OledWriteByte(SET_DISPLAY_CLOCK,OLED_CMD);
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	85 ed       	ldi	r24, 0xD5	; 213
     13a:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	OledWriteByte(0x80,OLED_CMD);
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	80 e8       	ldi	r24, 0x80	; 128
     142:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	
	/*设置驱动路数*/
	OledWriteByte(SET_MULTIPLEX_RATIO,OLED_CMD);			  //驱动路数设置命令
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	88 ea       	ldi	r24, 0xA8	; 168
     14a:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	OledWriteByte(0x3F,OLED_CMD);							  //驱动路数值
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	8f e3       	ldi	r24, 0x3F	; 63
     152:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>

	/*设置行显示偏移*/
	OledWriteByte(SET_DISPLAY_OFFSET,OLED_CMD);				  //显示偏移设置命令
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	83 ed       	ldi	r24, 0xD3	; 211
     15a:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	OledWriteByte(0x00,OLED_CMD);							  //取值范围：0x00-->0x3F
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>

	/*设置显示起始行*/
	OledWriteByte(0x40,OLED_CMD);							  //取值范围：0x40---0x7F
     166:	60 e0       	ldi	r22, 0x00	; 0
     168:	80 e4       	ldi	r24, 0x40	; 64
     16a:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	
	/*设置电荷泵*/
	OledWriteByte(CHARGE_PUMP_SET,OLED_CMD); 				  //电荷泵设置命令
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	8d e8       	ldi	r24, 0x8D	; 141
     172:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	OledWriteByte(0x14,OLED_CMD);							  //开启电荷泵
     176:	60 e0       	ldi	r22, 0x00	; 0
     178:	84 e1       	ldi	r24, 0x14	; 20
     17a:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>

	/*设置内存地址模式*/
	OledWriteByte(SET_MEMORY_ADDR_MODE,OLED_CMD);			  //内存地址模式设置命令
     17e:	60 e0       	ldi	r22, 0x00	; 0
     180:	80 e2       	ldi	r24, 0x20	; 32
     182:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	OledWriteByte(0x10,OLED_CMD);							  //设置地址模式值：0x00,列地址模式；0x01,行地址模式；
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	80 e1       	ldi	r24, 0x10	; 16
     18a:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	//0x10，页地址模式；
	/*设置列地址映射*/
	OledWriteByte(SET_SEGMENT_REMAP_A1,OLED_CMD); 			  //列地址0映射到SEG127
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	81 ea       	ldi	r24, 0xA1	; 161
     192:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>

	/*设置行地址映射*/
	OledWriteByte(SET_COM_SCAN_DIRECTION_C8,OLED_CMD); 		  //行地址0映射到COM63
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	88 ec       	ldi	r24, 0xC8	; 200
     19a:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	
	/*设置COM硬件引脚配置*/
	OledWriteByte(SET_COM_PINS_CONFIG,OLED_CMD); 			  //设置COM硬件引脚配置命令
     19e:	60 e0       	ldi	r22, 0x00	; 0
     1a0:	8a ed       	ldi	r24, 0xDA	; 218
     1a2:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	OledWriteByte(0x12,OLED_CMD);
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	82 e1       	ldi	r24, 0x12	; 18
     1aa:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>

	/*对比度设置*/
	OledWriteByte(SET_CONTRAST_CONTROL,OLED_CMD); 			   //对比度设置命令
     1ae:	60 e0       	ldi	r22, 0x00	; 0
     1b0:	81 e8       	ldi	r24, 0x81	; 129
     1b2:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	OledWriteByte(0x8F,OLED_CMD); 							   //对比度值，取值范围1-255
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	8f e8       	ldi	r24, 0x8F	; 143
     1ba:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	
	/*设置预充电周期*/
	OledWriteByte(SET_PRECHARGE_PERIOD,OLED_CMD);
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	89 ed       	ldi	r24, 0xD9	; 217
     1c2:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	OledWriteByte(0xF1,OLED_CMD);
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	81 ef       	ldi	r24, 0xF1	; 241
     1ca:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	
	/*设置VCOMH电源倍率*/
	OledWriteByte(SET_VCOMH_DESELECT_L,OLED_CMD);
     1ce:	60 e0       	ldi	r22, 0x00	; 0
     1d0:	8b ed       	ldi	r24, 0xDB	; 219
     1d2:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	OledWriteByte(0x30,OLED_CMD);
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	80 e3       	ldi	r24, 0x30	; 48
     1da:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>

	/*关闭全局显示*/
	OledWriteByte(ENTIRE_DISPLAY_ON_A4,OLED_CMD);
     1de:	60 e0       	ldi	r22, 0x00	; 0
     1e0:	84 ea       	ldi	r24, 0xA4	; 164
     1e2:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>

	/*设置OLED点亮方式*/
	OledWriteByte(NORMAL_DISPLAY,OLED_CMD); 	 				//0：熄灭像素；1：点亮像素
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	86 ea       	ldi	r24, 0xA6	; 166
     1ea:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>

	/*打开OLED显示*/
	OledWriteByte(SET_DISPLAY_ON,OLED_CMD);
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	8f ea       	ldi	r24, 0xAF	; 175
     1f2:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	
	/*清屏操作*/
	OledClearn();
     1f6:	0c 94 78 00 	jmp	0xf0	; 0xf0 <OledClearn>

000001fa <xianshi1>:
}
void xianshi1(char Digitchar ,char y,char x)
{uchar i,j,addyl,addyh;
     1fa:	cf 92       	push	r12
     1fc:	df 92       	push	r13
     1fe:	ef 92       	push	r14
     200:	ff 92       	push	r15
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
	uchar *databuf;
	

	databuf=(uchar *)(ASCII_1608+Digitchar+16);
     20a:	90 e1       	ldi	r25, 0x10	; 16
     20c:	89 9f       	mul	r24, r25
     20e:	e0 01       	movw	r28, r0
     210:	11 24       	eor	r1, r1
     212:	ce 5d       	subi	r28, 0xDE	; 222
     214:	dd 4f       	sbci	r29, 0xFD	; 253
	
	/*计算当前字符显示的起始列地址*/
	addyl=x%16;										//计算列低地址
     216:	84 2f       	mov	r24, r20
     218:	8f 70       	andi	r24, 0x0F	; 15
     21a:	c8 2e       	mov	r12, r24
	addyh=x/16+0x10;								//计算列高地址
     21c:	e4 2e       	mov	r14, r20
     21e:	e2 94       	swap	r14
     220:	8f e0       	ldi	r24, 0x0F	; 15
     222:	e8 22       	and	r14, r24
     224:	90 e1       	ldi	r25, 0x10	; 16
     226:	e9 0e       	add	r14, r25
     228:	92 eb       	ldi	r25, 0xB2	; 178
     22a:	d9 2e       	mov	r13, r25
     22c:	d6 0e       	add	r13, r22
     22e:	20 eb       	ldi	r18, 0xB0	; 176
     230:	f2 2e       	mov	r15, r18
     232:	f6 0e       	add	r15, r22

	/*显示字符*/
	for(i=0;i<2;i++)
	{
		OledWriteByte(0xb0+y+i,OLED_CMD);			//设置页地址
     234:	60 e0       	ldi	r22, 0x00	; 0
     236:	8f 2d       	mov	r24, r15
     238:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
		OledWriteByte(addyl,OLED_CMD);				//设置列低地址
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	8c 2d       	mov	r24, r12
     240:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
		OledWriteByte(addyh,OLED_CMD);				//设置列高地址
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	8e 2d       	mov	r24, r14
     248:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
     24c:	8e 01       	movw	r16, r28
     24e:	08 5f       	subi	r16, 0xF8	; 248
     250:	1f 4f       	sbci	r17, 0xFF	; 255

		for(j=0;j<8;j++)
		{
			OledWriteByte(*(databuf++),OLED_DATA);
     252:	61 e0       	ldi	r22, 0x01	; 1
     254:	89 91       	ld	r24, Y+
     256:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
	{
		OledWriteByte(0xb0+y+i,OLED_CMD);			//设置页地址
		OledWriteByte(addyl,OLED_CMD);				//设置列低地址
		OledWriteByte(addyh,OLED_CMD);				//设置列高地址

		for(j=0;j<8;j++)
     25a:	0c 17       	cp	r16, r28
     25c:	1d 07       	cpc	r17, r29
     25e:	c9 f7       	brne	.-14     	; 0x252 <xianshi1+0x58>
     260:	e8 01       	movw	r28, r16
     262:	f3 94       	inc	r15
	/*计算当前字符显示的起始列地址*/
	addyl=x%16;										//计算列低地址
	addyh=x/16+0x10;								//计算列高地址

	/*显示字符*/
	for(i=0;i<2;i++)
     264:	fd 10       	cpse	r15, r13
     266:	e6 cf       	rjmp	.-52     	; 0x234 <xianshi1+0x3a>
		}
	}


	
}
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	1f 91       	pop	r17
     26e:	0f 91       	pop	r16
     270:	ff 90       	pop	r15
     272:	ef 90       	pop	r14
     274:	df 90       	pop	r13
     276:	cf 90       	pop	r12
     278:	08 95       	ret

0000027a <Cache_MDigit5>:
	
	xianshi1(d0,y,x);
	xianshi1(d1,y,x+6+i);
}
void Cache_MDigit5(uint Digit,char y,char x,char i )//5位数 y0-7 x0-127
{unsigned int d0,d1,d2,d3,d4;
     27a:	8f 92       	push	r8
     27c:	9f 92       	push	r9
     27e:	af 92       	push	r10
     280:	bf 92       	push	r11
     282:	cf 92       	push	r12
     284:	df 92       	push	r13
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	5c 01       	movw	r10, r24
     294:	96 2e       	mov	r9, r22
     296:	84 2e       	mov	r8, r20
     298:	c2 2f       	mov	r28, r18

	d0=Digit/10000;
     29a:	9c 01       	movw	r18, r24
     29c:	32 95       	swap	r19
     29e:	22 95       	swap	r18
     2a0:	2f 70       	andi	r18, 0x0F	; 15
     2a2:	23 27       	eor	r18, r19
     2a4:	3f 70       	andi	r19, 0x0F	; 15
     2a6:	23 27       	eor	r18, r19
     2a8:	a7 e4       	ldi	r26, 0x47	; 71
     2aa:	b3 e0       	ldi	r27, 0x03	; 3
     2ac:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__umulhisi3>
     2b0:	fc 01       	movw	r30, r24
     2b2:	f6 95       	lsr	r31
     2b4:	e7 95       	ror	r30
     2b6:	f6 95       	lsr	r31
     2b8:	e7 95       	ror	r30
     2ba:	f6 95       	lsr	r31
     2bc:	e7 95       	ror	r30
	Digit=Digit-d0*10000;
     2be:	20 e1       	ldi	r18, 0x10	; 16
     2c0:	37 e2       	ldi	r19, 0x27	; 39
     2c2:	e2 9f       	mul	r30, r18
     2c4:	c0 01       	movw	r24, r0
     2c6:	e3 9f       	mul	r30, r19
     2c8:	90 0d       	add	r25, r0
     2ca:	f2 9f       	mul	r31, r18
     2cc:	90 0d       	add	r25, r0
     2ce:	11 24       	eor	r1, r1
     2d0:	a8 1a       	sub	r10, r24
     2d2:	b9 0a       	sbc	r11, r25
	d1=Digit/1000;
     2d4:	95 01       	movw	r18, r10
     2d6:	36 95       	lsr	r19
     2d8:	27 95       	ror	r18
     2da:	36 95       	lsr	r19
     2dc:	27 95       	ror	r18
     2de:	36 95       	lsr	r19
     2e0:	27 95       	ror	r18
     2e2:	a5 ec       	ldi	r26, 0xC5	; 197
     2e4:	b0 e2       	ldi	r27, 0x20	; 32
     2e6:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__umulhisi3>
     2ea:	6c 01       	movw	r12, r24
     2ec:	d2 94       	swap	r13
     2ee:	c2 94       	swap	r12
     2f0:	af e0       	ldi	r26, 0x0F	; 15
     2f2:	ca 22       	and	r12, r26
     2f4:	cd 24       	eor	r12, r13
     2f6:	da 22       	and	r13, r26
     2f8:	cd 24       	eor	r12, r13
	Digit=Digit-d1*1000;
     2fa:	28 ee       	ldi	r18, 0xE8	; 232
     2fc:	33 e0       	ldi	r19, 0x03	; 3
     2fe:	c2 9e       	mul	r12, r18
     300:	c0 01       	movw	r24, r0
     302:	c3 9e       	mul	r12, r19
     304:	90 0d       	add	r25, r0
     306:	d2 9e       	mul	r13, r18
     308:	90 0d       	add	r25, r0
     30a:	11 24       	eor	r1, r1
     30c:	a8 1a       	sub	r10, r24
     30e:	b9 0a       	sbc	r11, r25
	d2=Digit/100;
     310:	95 01       	movw	r18, r10
     312:	36 95       	lsr	r19
     314:	27 95       	ror	r18
     316:	36 95       	lsr	r19
     318:	27 95       	ror	r18
     31a:	ab e7       	ldi	r26, 0x7B	; 123
     31c:	b4 e1       	ldi	r27, 0x14	; 20
     31e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__umulhisi3>
     322:	7c 01       	movw	r14, r24
     324:	f6 94       	lsr	r15
     326:	e7 94       	ror	r14
	Digit=Digit-d2*100;
     328:	24 e6       	ldi	r18, 0x64	; 100
     32a:	2e 9d       	mul	r18, r14
     32c:	c0 01       	movw	r24, r0
     32e:	2f 9d       	mul	r18, r15
     330:	90 0d       	add	r25, r0
     332:	11 24       	eor	r1, r1
     334:	a8 1a       	sub	r10, r24
     336:	b9 0a       	sbc	r11, r25
	d3=Digit/10;
     338:	95 01       	movw	r18, r10
     33a:	ad ec       	ldi	r26, 0xCD	; 205
     33c:	bc ec       	ldi	r27, 0xCC	; 204
     33e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__umulhisi3>
     342:	8c 01       	movw	r16, r24
     344:	16 95       	lsr	r17
     346:	07 95       	ror	r16
     348:	16 95       	lsr	r17
     34a:	07 95       	ror	r16
     34c:	16 95       	lsr	r17
     34e:	07 95       	ror	r16
	Digit=Digit-d3*10;
	d4=Digit%10;
	
	xianshi1(d0,y,x);
     350:	69 2d       	mov	r22, r9
     352:	8e 2f       	mov	r24, r30
     354:	0e 94 fd 00 	call	0x1fa	; 0x1fa <xianshi1>
	xianshi1(d1,y,x+6+i);
     358:	46 e0       	ldi	r20, 0x06	; 6
     35a:	4c 0f       	add	r20, r28
     35c:	48 0d       	add	r20, r8
     35e:	69 2d       	mov	r22, r9
     360:	8c 2d       	mov	r24, r12
     362:	0e 94 fd 00 	call	0x1fa	; 0x1fa <xianshi1>
	xianshi1(d2,y,x+(6+i)*2);
     366:	d0 e0       	ldi	r29, 0x00	; 0
     368:	26 96       	adiw	r28, 0x06	; 6
     36a:	dc 2f       	mov	r29, r28
     36c:	dd 0f       	add	r29, r29
     36e:	d8 0d       	add	r29, r8
     370:	4d 2f       	mov	r20, r29
     372:	69 2d       	mov	r22, r9
     374:	8e 2d       	mov	r24, r14
     376:	0e 94 fd 00 	call	0x1fa	; 0x1fa <xianshi1>
	xianshi1(d3,y,x+(6+i)*3);
     37a:	dc 0f       	add	r29, r28
     37c:	4d 2f       	mov	r20, r29
     37e:	69 2d       	mov	r22, r9
     380:	80 2f       	mov	r24, r16
     382:	0e 94 fd 00 	call	0x1fa	; 0x1fa <xianshi1>
	xianshi1(d4,y,x+(6+i)*4);
     386:	4c 2f       	mov	r20, r28
     388:	4d 0f       	add	r20, r29
	d1=Digit/1000;
	Digit=Digit-d1*1000;
	d2=Digit/100;
	Digit=Digit-d2*100;
	d3=Digit/10;
	Digit=Digit-d3*10;
     38a:	f8 01       	movw	r30, r16
     38c:	ee 0f       	add	r30, r30
     38e:	ff 1f       	adc	r31, r31
     390:	00 0f       	add	r16, r16
     392:	11 1f       	adc	r17, r17
     394:	00 0f       	add	r16, r16
     396:	11 1f       	adc	r17, r17
     398:	00 0f       	add	r16, r16
     39a:	11 1f       	adc	r17, r17
     39c:	e0 0f       	add	r30, r16
     39e:	f1 1f       	adc	r31, r17
     3a0:	ae 1a       	sub	r10, r30
     3a2:	bf 0a       	sbc	r11, r31
	d4=Digit%10;
     3a4:	95 01       	movw	r18, r10
     3a6:	ad ec       	ldi	r26, 0xCD	; 205
     3a8:	bc ec       	ldi	r27, 0xCC	; 204
     3aa:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__umulhisi3>
     3ae:	96 95       	lsr	r25
     3b0:	87 95       	ror	r24
     3b2:	96 95       	lsr	r25
     3b4:	87 95       	ror	r24
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
	
	xianshi1(d0,y,x);
	xianshi1(d1,y,x+6+i);
	xianshi1(d2,y,x+(6+i)*2);
	xianshi1(d3,y,x+(6+i)*3);
	xianshi1(d4,y,x+(6+i)*4);
     3ba:	69 2d       	mov	r22, r9
     3bc:	2a 2d       	mov	r18, r10
     3be:	3a e0       	ldi	r19, 0x0A	; 10
     3c0:	83 9f       	mul	r24, r19
     3c2:	20 19       	sub	r18, r0
     3c4:	11 24       	eor	r1, r1
     3c6:	82 2f       	mov	r24, r18
}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	ff 90       	pop	r15
     3d2:	ef 90       	pop	r14
     3d4:	df 90       	pop	r13
     3d6:	cf 90       	pop	r12
     3d8:	bf 90       	pop	r11
     3da:	af 90       	pop	r10
     3dc:	9f 90       	pop	r9
     3de:	8f 90       	pop	r8
	
	xianshi1(d0,y,x);
	xianshi1(d1,y,x+6+i);
	xianshi1(d2,y,x+(6+i)*2);
	xianshi1(d3,y,x+(6+i)*3);
	xianshi1(d4,y,x+(6+i)*4);
     3e0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <xianshi1>

000003e4 <DisplayChar_16X08>:
	xianshi1(d3,y,x+(6+i)*4);
	xianshi1(d4,y,x+(6+i)*5);
}

void DisplayChar_16X08(uchar y,uchar x,char *dispdata)
{
     3e4:	8f 92       	push	r8
     3e6:	9f 92       	push	r9
     3e8:	af 92       	push	r10
     3ea:	bf 92       	push	r11
     3ec:	cf 92       	push	r12
     3ee:	df 92       	push	r13
     3f0:	ef 92       	push	r14
     3f2:	ff 92       	push	r15
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	b8 2e       	mov	r11, r24
	uchar i,j,fontposition,addyl,addyh;
	uchar *databuf;

	while((*dispdata)!=0)
     3fe:	fa 01       	movw	r30, r20
     400:	c0 81       	ld	r28, Z
     402:	cc 23       	and	r28, r28
     404:	d9 f1       	breq	.+118    	; 0x47c <DisplayChar_16X08+0x98>
     406:	70 eb       	ldi	r23, 0xB0	; 176
     408:	87 2e       	mov	r8, r23
     40a:	86 0e       	add	r8, r22
     40c:	7a 01       	movw	r14, r20
     40e:	ff ef       	ldi	r31, 0xFF	; 255
     410:	ef 1a       	sub	r14, r31
     412:	ff 0a       	sbc	r15, r31
     414:	e2 eb       	ldi	r30, 0xB2	; 178
     416:	9e 2e       	mov	r9, r30
     418:	96 0e       	add	r9, r22
	{
		//		if((y>127)||(x>7))	 break;						//判断字符显示的位置是否超出范围
		
		/*获取字符在字库中的位置*/
		fontposition=*dispdata-0x20;					//计算字符在字库中的位置
     41a:	c0 52       	subi	r28, 0x20	; 32
		databuf=(uchar *)(ASCII_1608+fontposition);
     41c:	80 e1       	ldi	r24, 0x10	; 16
     41e:	c8 9f       	mul	r28, r24
     420:	e0 01       	movw	r28, r0
     422:	11 24       	eor	r1, r1
     424:	ce 5d       	subi	r28, 0xDE	; 222
     426:	de 4f       	sbci	r29, 0xFE	; 254
		
		/*计算当前字符显示的起始列地址*/
		addyl=y%16;										//计算列低地址
     428:	eb 2d       	mov	r30, r11
     42a:	ef 70       	andi	r30, 0x0F	; 15
     42c:	ae 2e       	mov	r10, r30
		addyh=y/16+0x10;								//计算列高地址
     42e:	cb 2c       	mov	r12, r11
     430:	c2 94       	swap	r12
     432:	5f e0       	ldi	r21, 0x0F	; 15
     434:	c5 22       	and	r12, r21
     436:	f0 e1       	ldi	r31, 0x10	; 16
     438:	cf 0e       	add	r12, r31
     43a:	d8 2c       	mov	r13, r8

		/*显示字符*/
		for(i=0;i<2;i++)
		{
			OledWriteByte(0xb0+x+i,OLED_CMD);			//设置页地址
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	8d 2d       	mov	r24, r13
     440:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
			OledWriteByte(addyl,OLED_CMD);				//设置列低地址
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	8a 2d       	mov	r24, r10
     448:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
			OledWriteByte(addyh,OLED_CMD);				//设置列高地址
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	8c 2d       	mov	r24, r12
     450:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
     454:	8e 01       	movw	r16, r28
     456:	08 5f       	subi	r16, 0xF8	; 248
     458:	1f 4f       	sbci	r17, 0xFF	; 255

			for(j=0;j<8;j++)
			{
				OledWriteByte(*(databuf++),OLED_DATA);
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	89 91       	ld	r24, Y+
     45e:	0e 94 63 00 	call	0xc6	; 0xc6 <OledWriteByte>
		{
			OledWriteByte(0xb0+x+i,OLED_CMD);			//设置页地址
			OledWriteByte(addyl,OLED_CMD);				//设置列低地址
			OledWriteByte(addyh,OLED_CMD);				//设置列高地址

			for(j=0;j<8;j++)
     462:	c0 17       	cp	r28, r16
     464:	d1 07       	cpc	r29, r17
     466:	c9 f7       	brne	.-14     	; 0x45a <DisplayChar_16X08+0x76>
     468:	d3 94       	inc	r13
		/*计算当前字符显示的起始列地址*/
		addyl=y%16;										//计算列低地址
		addyh=y/16+0x10;								//计算列高地址

		/*显示字符*/
		for(i=0;i<2;i++)
     46a:	d9 10       	cpse	r13, r9
     46c:	e7 cf       	rjmp	.-50     	; 0x43c <DisplayChar_16X08+0x58>
			{
				OledWriteByte(*(databuf++),OLED_DATA);
			}
		}

		y+=8;											//列地址自加6
     46e:	88 e0       	ldi	r24, 0x08	; 8
     470:	b8 0e       	add	r11, r24
void DisplayChar_16X08(uchar y,uchar x,char *dispdata)
{
	uchar i,j,fontposition,addyl,addyh;
	uchar *databuf;

	while((*dispdata)!=0)
     472:	f7 01       	movw	r30, r14
     474:	c1 91       	ld	r28, Z+
     476:	7f 01       	movw	r14, r30
     478:	c1 11       	cpse	r28, r1
     47a:	cf cf       	rjmp	.-98     	; 0x41a <DisplayChar_16X08+0x36>
		}

		y+=8;											//列地址自加6
		dispdata++;
	}
}
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	df 90       	pop	r13
     48a:	cf 90       	pop	r12
     48c:	bf 90       	pop	r11
     48e:	af 90       	pop	r10
     490:	9f 90       	pop	r9
     492:	8f 90       	pop	r8
     494:	08 95       	ret

00000496 <adc_read>:
}

/********AD转换********/
unsigned int adc_read(unsigned char ADCChannel)
{ unsigned int data;unsigned char i;
	ADMUX = (ADMUX & 0xf0)+(ADCChannel & 0x0f);
     496:	90 91 7c 00 	lds	r25, 0x007C
     49a:	8f 70       	andi	r24, 0x0F	; 15
     49c:	90 7f       	andi	r25, 0xF0	; 240
     49e:	89 0f       	add	r24, r25
     4a0:	80 93 7c 00 	sts	0x007C, r24
     4a4:	44 e0       	ldi	r20, 0x04	; 4
	data = 0;
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
	for (i=0;i<4;i++)                        //??????
	{     ADCSRA|=0x40;                   //??????
     4aa:	20 91 7a 00 	lds	r18, 0x007A
     4ae:	20 64       	ori	r18, 0x40	; 64
     4b0:	20 93 7a 00 	sts	0x007A, r18
		while ((ADCSRA&0x10)==0);       //???????
     4b4:	20 91 7a 00 	lds	r18, 0x007A
     4b8:	24 ff       	sbrs	r18, 4
     4ba:	fc cf       	rjmp	.-8      	; 0x4b4 <adc_read+0x1e>
		ADCSRA&=0xEF;                   //????λ
     4bc:	20 91 7a 00 	lds	r18, 0x007A
     4c0:	2f 7e       	andi	r18, 0xEF	; 239
     4c2:	20 93 7a 00 	sts	0x007A, r18
		data+=ADC;                        //???????
     4c6:	20 91 78 00 	lds	r18, 0x0078
     4ca:	30 91 79 00 	lds	r19, 0x0079
     4ce:	82 0f       	add	r24, r18
     4d0:	93 1f       	adc	r25, r19
     4d2:	41 50       	subi	r20, 0x01	; 1
/********AD转换********/
unsigned int adc_read(unsigned char ADCChannel)
{ unsigned int data;unsigned char i;
	ADMUX = (ADMUX & 0xf0)+(ADCChannel & 0x0f);
	data = 0;
	for (i=0;i<4;i++)                        //??????
     4d4:	51 f7       	brne	.-44     	; 0x4aa <adc_read+0x14>
		ADCSRA&=0xEF;                   //????λ
		data+=ADC;                        //???????
	}
	data/=4;                              //??????
	return data;
     4d6:	96 95       	lsr	r25
     4d8:	87 95       	ror	r24
     4da:	96 95       	lsr	r25
     4dc:	87 95       	ror	r24
     4de:	08 95       	ret

000004e0 <off_servo>:
	servo_ch[number]=servo_Direction[number]*age_t+2000+offset_sever;
}

void off_servo(void)//关闭舵机
{
	TCCR1B=0x00;
     4e0:	10 92 81 00 	sts	0x0081, r1
	servo_01_l;servo_02_l;servo_03_l;servo_04_l;
     4e4:	5c 98       	cbi	0x0b, 4	; 11
     4e6:	5d 98       	cbi	0x0b, 5	; 11
     4e8:	5e 98       	cbi	0x0b, 6	; 11
     4ea:	5f 98       	cbi	0x0b, 7	; 11
    servo_05_l;servo_06_l;servo_07_l;servo_08_l;
     4ec:	28 98       	cbi	0x05, 0	; 5
     4ee:	29 98       	cbi	0x05, 1	; 5
     4f0:	2a 98       	cbi	0x05, 2	; 5
     4f2:	2b 98       	cbi	0x05, 3	; 5
	pp=18;
     4f4:	82 e1       	ldi	r24, 0x12	; 18
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	90 93 3f 07 	sts	0x073F, r25
     4fc:	80 93 3e 07 	sts	0x073E, r24
     500:	08 95       	ret

00000502 <__vector_13>:
	TIMSK1=0x01;        //溢出中断使能
	TCNT1=0x0BDC;
}

ISR(TIMER1_OVF_vect)//8路舵机输出
{
     502:	1f 92       	push	r1
     504:	0f 92       	push	r0
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	0f 92       	push	r0
     50a:	11 24       	eor	r1, r1
     50c:	2f 93       	push	r18
     50e:	3f 93       	push	r19
     510:	8f 93       	push	r24
     512:	9f 93       	push	r25
     514:	ef 93       	push	r30
     516:	ff 93       	push	r31
	switch(pp)
     518:	80 91 3e 07 	lds	r24, 0x073E
     51c:	90 91 3f 07 	lds	r25, 0x073F
     520:	80 31       	cpi	r24, 0x10	; 16
     522:	91 05       	cpc	r25, r1
     524:	a8 f0       	brcs	.+42     	; 0x550 <__vector_13+0x4e>
		case 13:servo_07_l;TCNT1=61535+servo_ch[6];pp=14;break;
		
		case 14:servo_08_h;TCNT1=64535-servo_ch[7];pp=15;break;//舵机6 15ms
		case 15:servo_08_l;TCNT1=61535+servo_ch[7];pp=0; time_seve++;break;
		
		default:TCNT1=65535;pp=0;break;
     526:	8f ef       	ldi	r24, 0xFF	; 255
     528:	9f ef       	ldi	r25, 0xFF	; 255
     52a:	90 93 85 00 	sts	0x0085, r25
     52e:	80 93 84 00 	sts	0x0084, r24
     532:	10 92 3f 07 	sts	0x073F, r1
     536:	10 92 3e 07 	sts	0x073E, r1
		
	}
	
     53a:	ff 91       	pop	r31
     53c:	ef 91       	pop	r30
     53e:	9f 91       	pop	r25
     540:	8f 91       	pop	r24
     542:	3f 91       	pop	r19
     544:	2f 91       	pop	r18
     546:	0f 90       	pop	r0
     548:	0f be       	out	0x3f, r0	; 63
     54a:	0f 90       	pop	r0
     54c:	1f 90       	pop	r1
     54e:	18 95       	reti
	TCNT1=0x0BDC;
}

ISR(TIMER1_OVF_vect)//8路舵机输出
{
	switch(pp)
     550:	fc 01       	movw	r30, r24
     552:	ec 5c       	subi	r30, 0xCC	; 204
     554:	ff 4f       	sbci	r31, 0xFF	; 255
     556:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <__tablejump2__>
		case 11:servo_06_l;TCNT1=61535+servo_ch[5];pp=12;break;
		
		case 12:servo_07_h;TCNT1=64535-servo_ch[6];pp=13;break;//舵机7 15ms
		case 13:servo_07_l;TCNT1=61535+servo_ch[6];pp=14;break;
		
		case 14:servo_08_h;TCNT1=64535-servo_ch[7];pp=15;break;//舵机6 15ms
     55a:	2b 9a       	sbi	0x05, 3	; 5
     55c:	87 e1       	ldi	r24, 0x17	; 23
     55e:	9c ef       	ldi	r25, 0xFC	; 252
     560:	20 91 20 01 	lds	r18, 0x0120
     564:	30 91 21 01 	lds	r19, 0x0121
     568:	82 1b       	sub	r24, r18
     56a:	93 0b       	sbc	r25, r19
     56c:	90 93 85 00 	sts	0x0085, r25
     570:	80 93 84 00 	sts	0x0084, r24
     574:	8f e0       	ldi	r24, 0x0F	; 15
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	90 93 3f 07 	sts	0x073F, r25
     57c:	80 93 3e 07 	sts	0x073E, r24
     580:	dc cf       	rjmp	.-72     	; 0x53a <__vector_13+0x38>
		case 15:servo_08_l;TCNT1=61535+servo_ch[7];pp=0; time_seve++;break;
     582:	2b 98       	cbi	0x05, 3	; 5
     584:	80 91 20 01 	lds	r24, 0x0120
     588:	90 91 21 01 	lds	r25, 0x0121
     58c:	81 5a       	subi	r24, 0xA1	; 161
     58e:	9f 40       	sbci	r25, 0x0F	; 15
     590:	90 93 85 00 	sts	0x0085, r25
     594:	80 93 84 00 	sts	0x0084, r24
     598:	10 92 3f 07 	sts	0x073F, r1
     59c:	10 92 3e 07 	sts	0x073E, r1
     5a0:	80 91 3c 07 	lds	r24, 0x073C
     5a4:	90 91 3d 07 	lds	r25, 0x073D
     5a8:	01 96       	adiw	r24, 0x01	; 1
     5aa:	90 93 3d 07 	sts	0x073D, r25
     5ae:	80 93 3c 07 	sts	0x073C, r24
     5b2:	c3 cf       	rjmp	.-122    	; 0x53a <__vector_13+0x38>

ISR(TIMER1_OVF_vect)//8路舵机输出
{
	switch(pp)
	{
		case 0:servo_01_h;TCNT1=64535-servo_ch[0];pp=1;break;//舵机1 2.5ms  3250
     5b4:	5c 9a       	sbi	0x0b, 4	; 11
     5b6:	87 e1       	ldi	r24, 0x17	; 23
     5b8:	9c ef       	ldi	r25, 0xFC	; 252
     5ba:	20 91 12 01 	lds	r18, 0x0112
     5be:	30 91 13 01 	lds	r19, 0x0113
     5c2:	82 1b       	sub	r24, r18
     5c4:	93 0b       	sbc	r25, r19
     5c6:	90 93 85 00 	sts	0x0085, r25
     5ca:	80 93 84 00 	sts	0x0084, r24
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	90 93 3f 07 	sts	0x073F, r25
     5d6:	80 93 3e 07 	sts	0x073E, r24
     5da:	af cf       	rjmp	.-162    	; 0x53a <__vector_13+0x38>
		case 1:servo_01_l;TCNT1=61535+servo_ch[0];pp=2;break;
     5dc:	5c 98       	cbi	0x0b, 4	; 11
     5de:	80 91 12 01 	lds	r24, 0x0112
     5e2:	90 91 13 01 	lds	r25, 0x0113
     5e6:	81 5a       	subi	r24, 0xA1	; 161
     5e8:	9f 40       	sbci	r25, 0x0F	; 15
     5ea:	90 93 85 00 	sts	0x0085, r25
     5ee:	80 93 84 00 	sts	0x0084, r24
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	90 93 3f 07 	sts	0x073F, r25
     5fa:	80 93 3e 07 	sts	0x073E, r24
     5fe:	9d cf       	rjmp	.-198    	; 0x53a <__vector_13+0x38>
		
		case 2:servo_02_h;TCNT1=64535-servo_ch[1];pp=3;break;//舵机2 5ms
     600:	5d 9a       	sbi	0x0b, 5	; 11
     602:	87 e1       	ldi	r24, 0x17	; 23
     604:	9c ef       	ldi	r25, 0xFC	; 252
     606:	20 91 14 01 	lds	r18, 0x0114
     60a:	30 91 15 01 	lds	r19, 0x0115
     60e:	82 1b       	sub	r24, r18
     610:	93 0b       	sbc	r25, r19
     612:	90 93 85 00 	sts	0x0085, r25
     616:	80 93 84 00 	sts	0x0084, r24
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	90 93 3f 07 	sts	0x073F, r25
     622:	80 93 3e 07 	sts	0x073E, r24
     626:	89 cf       	rjmp	.-238    	; 0x53a <__vector_13+0x38>
		case 3:servo_02_l;TCNT1=61535+servo_ch[1];pp=4;break;
     628:	5d 98       	cbi	0x0b, 5	; 11
     62a:	80 91 14 01 	lds	r24, 0x0114
     62e:	90 91 15 01 	lds	r25, 0x0115
     632:	81 5a       	subi	r24, 0xA1	; 161
     634:	9f 40       	sbci	r25, 0x0F	; 15
     636:	90 93 85 00 	sts	0x0085, r25
     63a:	80 93 84 00 	sts	0x0084, r24
     63e:	84 e0       	ldi	r24, 0x04	; 4
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	90 93 3f 07 	sts	0x073F, r25
     646:	80 93 3e 07 	sts	0x073E, r24
     64a:	77 cf       	rjmp	.-274    	; 0x53a <__vector_13+0x38>
		
		case 4:servo_03_h;TCNT1=64535-servo_ch[2];pp=5;break;//舵机3 7.5ms
     64c:	5e 9a       	sbi	0x0b, 6	; 11
     64e:	87 e1       	ldi	r24, 0x17	; 23
     650:	9c ef       	ldi	r25, 0xFC	; 252
     652:	20 91 16 01 	lds	r18, 0x0116
     656:	30 91 17 01 	lds	r19, 0x0117
     65a:	82 1b       	sub	r24, r18
     65c:	93 0b       	sbc	r25, r19
     65e:	90 93 85 00 	sts	0x0085, r25
     662:	80 93 84 00 	sts	0x0084, r24
     666:	85 e0       	ldi	r24, 0x05	; 5
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	90 93 3f 07 	sts	0x073F, r25
     66e:	80 93 3e 07 	sts	0x073E, r24
     672:	63 cf       	rjmp	.-314    	; 0x53a <__vector_13+0x38>
		case 5:servo_03_l;TCNT1=61535+servo_ch[2];pp=6;break;
     674:	5e 98       	cbi	0x0b, 6	; 11
     676:	80 91 16 01 	lds	r24, 0x0116
     67a:	90 91 17 01 	lds	r25, 0x0117
     67e:	81 5a       	subi	r24, 0xA1	; 161
     680:	9f 40       	sbci	r25, 0x0F	; 15
     682:	90 93 85 00 	sts	0x0085, r25
     686:	80 93 84 00 	sts	0x0084, r24
     68a:	86 e0       	ldi	r24, 0x06	; 6
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	90 93 3f 07 	sts	0x073F, r25
     692:	80 93 3e 07 	sts	0x073E, r24
     696:	51 cf       	rjmp	.-350    	; 0x53a <__vector_13+0x38>
		
		case 6:servo_04_h;TCNT1=64535-servo_ch[3];pp=7;break;//舵机4 10ms
     698:	5f 9a       	sbi	0x0b, 7	; 11
     69a:	87 e1       	ldi	r24, 0x17	; 23
     69c:	9c ef       	ldi	r25, 0xFC	; 252
     69e:	20 91 18 01 	lds	r18, 0x0118
     6a2:	30 91 19 01 	lds	r19, 0x0119
     6a6:	82 1b       	sub	r24, r18
     6a8:	93 0b       	sbc	r25, r19
     6aa:	90 93 85 00 	sts	0x0085, r25
     6ae:	80 93 84 00 	sts	0x0084, r24
     6b2:	87 e0       	ldi	r24, 0x07	; 7
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	90 93 3f 07 	sts	0x073F, r25
     6ba:	80 93 3e 07 	sts	0x073E, r24
     6be:	3d cf       	rjmp	.-390    	; 0x53a <__vector_13+0x38>
		case 7:servo_04_l;TCNT1=61535+servo_ch[3];pp=8;break;
     6c0:	5f 98       	cbi	0x0b, 7	; 11
     6c2:	80 91 18 01 	lds	r24, 0x0118
     6c6:	90 91 19 01 	lds	r25, 0x0119
     6ca:	81 5a       	subi	r24, 0xA1	; 161
     6cc:	9f 40       	sbci	r25, 0x0F	; 15
     6ce:	90 93 85 00 	sts	0x0085, r25
     6d2:	80 93 84 00 	sts	0x0084, r24
     6d6:	88 e0       	ldi	r24, 0x08	; 8
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	90 93 3f 07 	sts	0x073F, r25
     6de:	80 93 3e 07 	sts	0x073E, r24
     6e2:	2b cf       	rjmp	.-426    	; 0x53a <__vector_13+0x38>
		
		case 8:servo_05_h;TCNT1=64535-servo_ch[4];pp=9;break;//舵机5 12.5ms
     6e4:	28 9a       	sbi	0x05, 0	; 5
     6e6:	87 e1       	ldi	r24, 0x17	; 23
     6e8:	9c ef       	ldi	r25, 0xFC	; 252
     6ea:	20 91 1a 01 	lds	r18, 0x011A
     6ee:	30 91 1b 01 	lds	r19, 0x011B
     6f2:	82 1b       	sub	r24, r18
     6f4:	93 0b       	sbc	r25, r19
     6f6:	90 93 85 00 	sts	0x0085, r25
     6fa:	80 93 84 00 	sts	0x0084, r24
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	90 93 3f 07 	sts	0x073F, r25
     706:	80 93 3e 07 	sts	0x073E, r24
     70a:	17 cf       	rjmp	.-466    	; 0x53a <__vector_13+0x38>
		case 9:servo_05_l;TCNT1=61535+servo_ch[4];pp=10;break;
     70c:	28 98       	cbi	0x05, 0	; 5
     70e:	80 91 1a 01 	lds	r24, 0x011A
     712:	90 91 1b 01 	lds	r25, 0x011B
     716:	81 5a       	subi	r24, 0xA1	; 161
     718:	9f 40       	sbci	r25, 0x0F	; 15
     71a:	90 93 85 00 	sts	0x0085, r25
     71e:	80 93 84 00 	sts	0x0084, r24
     722:	8a e0       	ldi	r24, 0x0A	; 10
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	90 93 3f 07 	sts	0x073F, r25
     72a:	80 93 3e 07 	sts	0x073E, r24
     72e:	05 cf       	rjmp	.-502    	; 0x53a <__vector_13+0x38>
		
		case 10:servo_06_h;TCNT1=64535-servo_ch[5];pp=11;break;//舵机6 15ms
     730:	29 9a       	sbi	0x05, 1	; 5
     732:	87 e1       	ldi	r24, 0x17	; 23
     734:	9c ef       	ldi	r25, 0xFC	; 252
     736:	20 91 1c 01 	lds	r18, 0x011C
     73a:	30 91 1d 01 	lds	r19, 0x011D
     73e:	82 1b       	sub	r24, r18
     740:	93 0b       	sbc	r25, r19
     742:	90 93 85 00 	sts	0x0085, r25
     746:	80 93 84 00 	sts	0x0084, r24
     74a:	8b e0       	ldi	r24, 0x0B	; 11
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	90 93 3f 07 	sts	0x073F, r25
     752:	80 93 3e 07 	sts	0x073E, r24
     756:	f1 ce       	rjmp	.-542    	; 0x53a <__vector_13+0x38>
		case 11:servo_06_l;TCNT1=61535+servo_ch[5];pp=12;break;
     758:	29 98       	cbi	0x05, 1	; 5
     75a:	80 91 1c 01 	lds	r24, 0x011C
     75e:	90 91 1d 01 	lds	r25, 0x011D
     762:	81 5a       	subi	r24, 0xA1	; 161
     764:	9f 40       	sbci	r25, 0x0F	; 15
     766:	90 93 85 00 	sts	0x0085, r25
     76a:	80 93 84 00 	sts	0x0084, r24
     76e:	8c e0       	ldi	r24, 0x0C	; 12
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	90 93 3f 07 	sts	0x073F, r25
     776:	80 93 3e 07 	sts	0x073E, r24
     77a:	df ce       	rjmp	.-578    	; 0x53a <__vector_13+0x38>
		
		case 12:servo_07_h;TCNT1=64535-servo_ch[6];pp=13;break;//舵机7 15ms
     77c:	2a 9a       	sbi	0x05, 2	; 5
     77e:	87 e1       	ldi	r24, 0x17	; 23
     780:	9c ef       	ldi	r25, 0xFC	; 252
     782:	20 91 1e 01 	lds	r18, 0x011E
     786:	30 91 1f 01 	lds	r19, 0x011F
     78a:	82 1b       	sub	r24, r18
     78c:	93 0b       	sbc	r25, r19
     78e:	90 93 85 00 	sts	0x0085, r25
     792:	80 93 84 00 	sts	0x0084, r24
     796:	8d e0       	ldi	r24, 0x0D	; 13
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	90 93 3f 07 	sts	0x073F, r25
     79e:	80 93 3e 07 	sts	0x073E, r24
     7a2:	cb ce       	rjmp	.-618    	; 0x53a <__vector_13+0x38>
		case 13:servo_07_l;TCNT1=61535+servo_ch[6];pp=14;break;
     7a4:	2a 98       	cbi	0x05, 2	; 5
     7a6:	80 91 1e 01 	lds	r24, 0x011E
     7aa:	90 91 1f 01 	lds	r25, 0x011F
     7ae:	81 5a       	subi	r24, 0xA1	; 161
     7b0:	9f 40       	sbci	r25, 0x0F	; 15
     7b2:	90 93 85 00 	sts	0x0085, r25
     7b6:	80 93 84 00 	sts	0x0084, r24
     7ba:	8e e0       	ldi	r24, 0x0E	; 14
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	90 93 3f 07 	sts	0x073F, r25
     7c2:	80 93 3e 07 	sts	0x073E, r24
     7c6:	b9 ce       	rjmp	.-654    	; 0x53a <__vector_13+0x38>

000007c8 <robot_stand>:
#define delay_time 100  //delay_time  每一步间隔的时间 单位 ms       一般值 100
/*robot_stand
Foot_age   -90~90 两腿展开还是并拢 一般值 0
Foot_height -90~90脚的高度位置 一般值-90*/
void robot_stand(int Foot_age,int Foot_height)
{servo_age(A1,Foot_age);servo_age(A2,Foot_height);
     7c8:	38 2f       	mov	r19, r24
     7ca:	29 2f       	mov	r18, r25
     7cc:	8c 39       	cpi	r24, 0x9C	; 156
     7ce:	4f ef       	ldi	r20, 0xFF	; 255
     7d0:	94 07       	cpc	r25, r20
     7d2:	14 f4       	brge	.+4      	; 0x7d8 <robot_stand+0x10>
     7d4:	3c e9       	ldi	r19, 0x9C	; 156
     7d6:	2f ef       	ldi	r18, 0xFF	; 255
     7d8:	e3 2f       	mov	r30, r19
     7da:	f2 2f       	mov	r31, r18
     7dc:	e5 36       	cpi	r30, 0x65	; 101
     7de:	f1 05       	cpc	r31, r1
     7e0:	14 f0       	brlt	.+4      	; 0x7e6 <robot_stand+0x1e>
     7e2:	e4 e6       	ldi	r30, 0x64	; 100
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
void servo_age(uchar number,int age)
{   int age_t;
	if (age>100){age_t=100;}
	else if (age<-100){age_t=-100;}
	else{age_t=age;}
	servo_ch[number]=servo_Direction[number]*age_t+2000+offset_sever;
     7e6:	20 91 00 01 	lds	r18, 0x0100
     7ea:	30 91 01 01 	lds	r19, 0x0101
     7ee:	a0 91 02 01 	lds	r26, 0x0102
     7f2:	b0 91 03 01 	lds	r27, 0x0103
     7f6:	ea 9f       	mul	r30, r26
     7f8:	a0 01       	movw	r20, r0
     7fa:	eb 9f       	mul	r30, r27
     7fc:	50 0d       	add	r21, r0
     7fe:	fa 9f       	mul	r31, r26
     800:	50 0d       	add	r21, r0
     802:	11 24       	eor	r1, r1
     804:	40 53       	subi	r20, 0x30	; 48
     806:	58 4f       	sbci	r21, 0xF8	; 248
     808:	42 0f       	add	r20, r18
     80a:	53 1f       	adc	r21, r19
     80c:	50 93 13 01 	sts	0x0113, r21
     810:	40 93 12 01 	sts	0x0112, r20
     814:	ab 01       	movw	r20, r22
     816:	4c 39       	cpi	r20, 0x9C	; 156
     818:	6f ef       	ldi	r22, 0xFF	; 255
     81a:	56 07       	cpc	r21, r22
     81c:	14 f4       	brge	.+4      	; 0x822 <robot_stand+0x5a>
     81e:	4c e9       	ldi	r20, 0x9C	; 156
     820:	5f ef       	ldi	r21, 0xFF	; 255
     822:	45 36       	cpi	r20, 0x65	; 101
     824:	51 05       	cpc	r21, r1
     826:	14 f0       	brlt	.+4      	; 0x82c <robot_stand+0x64>
     828:	44 e6       	ldi	r20, 0x64	; 100
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	a0 91 04 01 	lds	r26, 0x0104
     830:	b0 91 05 01 	lds	r27, 0x0105
     834:	4a 9f       	mul	r20, r26
     836:	b0 01       	movw	r22, r0
     838:	4b 9f       	mul	r20, r27
     83a:	70 0d       	add	r23, r0
     83c:	5a 9f       	mul	r21, r26
     83e:	70 0d       	add	r23, r0
     840:	11 24       	eor	r1, r1
     842:	60 53       	subi	r22, 0x30	; 48
     844:	78 4f       	sbci	r23, 0xF8	; 248
     846:	62 0f       	add	r22, r18
     848:	73 1f       	adc	r23, r19
     84a:	70 93 15 01 	sts	0x0115, r23
     84e:	60 93 14 01 	sts	0x0114, r22
 servo_age(B1,-Foot_age);servo_age(B2,Foot_height);
     852:	91 95       	neg	r25
     854:	81 95       	neg	r24
     856:	91 09       	sbc	r25, r1
     858:	8c 39       	cpi	r24, 0x9C	; 156
     85a:	6f ef       	ldi	r22, 0xFF	; 255
     85c:	96 07       	cpc	r25, r22
     85e:	14 f4       	brge	.+4      	; 0x864 <robot_stand+0x9c>
     860:	8c e9       	ldi	r24, 0x9C	; 156
     862:	9f ef       	ldi	r25, 0xFF	; 255
     864:	85 36       	cpi	r24, 0x65	; 101
     866:	91 05       	cpc	r25, r1
     868:	14 f0       	brlt	.+4      	; 0x86e <robot_stand+0xa6>
     86a:	84 e6       	ldi	r24, 0x64	; 100
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	a0 91 06 01 	lds	r26, 0x0106
     872:	b0 91 07 01 	lds	r27, 0x0107
     876:	8a 9f       	mul	r24, r26
     878:	b0 01       	movw	r22, r0
     87a:	8b 9f       	mul	r24, r27
     87c:	70 0d       	add	r23, r0
     87e:	9a 9f       	mul	r25, r26
     880:	70 0d       	add	r23, r0
     882:	11 24       	eor	r1, r1
     884:	60 53       	subi	r22, 0x30	; 48
     886:	78 4f       	sbci	r23, 0xF8	; 248
     888:	62 0f       	add	r22, r18
     88a:	73 1f       	adc	r23, r19
     88c:	70 93 17 01 	sts	0x0117, r23
     890:	60 93 16 01 	sts	0x0116, r22
     894:	a0 91 08 01 	lds	r26, 0x0108
     898:	b0 91 09 01 	lds	r27, 0x0109
     89c:	4a 9f       	mul	r20, r26
     89e:	b0 01       	movw	r22, r0
     8a0:	4b 9f       	mul	r20, r27
     8a2:	70 0d       	add	r23, r0
     8a4:	5a 9f       	mul	r21, r26
     8a6:	70 0d       	add	r23, r0
     8a8:	11 24       	eor	r1, r1
     8aa:	60 53       	subi	r22, 0x30	; 48
     8ac:	78 4f       	sbci	r23, 0xF8	; 248
     8ae:	62 0f       	add	r22, r18
     8b0:	73 1f       	adc	r23, r19
     8b2:	70 93 19 01 	sts	0x0119, r23
     8b6:	60 93 18 01 	sts	0x0118, r22
     8ba:	a0 91 0a 01 	lds	r26, 0x010A
     8be:	b0 91 0b 01 	lds	r27, 0x010B
     8c2:	ea 9f       	mul	r30, r26
     8c4:	b0 01       	movw	r22, r0
     8c6:	eb 9f       	mul	r30, r27
     8c8:	70 0d       	add	r23, r0
     8ca:	fa 9f       	mul	r31, r26
     8cc:	70 0d       	add	r23, r0
     8ce:	11 24       	eor	r1, r1
     8d0:	60 53       	subi	r22, 0x30	; 48
     8d2:	78 4f       	sbci	r23, 0xF8	; 248
     8d4:	62 0f       	add	r22, r18
     8d6:	73 1f       	adc	r23, r19
     8d8:	70 93 1b 01 	sts	0x011B, r23
     8dc:	60 93 1a 01 	sts	0x011A, r22
     8e0:	e0 91 0c 01 	lds	r30, 0x010C
     8e4:	f0 91 0d 01 	lds	r31, 0x010D
     8e8:	4e 9f       	mul	r20, r30
     8ea:	b0 01       	movw	r22, r0
     8ec:	4f 9f       	mul	r20, r31
     8ee:	70 0d       	add	r23, r0
     8f0:	5e 9f       	mul	r21, r30
     8f2:	70 0d       	add	r23, r0
     8f4:	11 24       	eor	r1, r1
     8f6:	60 53       	subi	r22, 0x30	; 48
     8f8:	78 4f       	sbci	r23, 0xF8	; 248
     8fa:	62 0f       	add	r22, r18
     8fc:	73 1f       	adc	r23, r19
     8fe:	70 93 1d 01 	sts	0x011D, r23
     902:	60 93 1c 01 	sts	0x011C, r22
     906:	e0 91 0e 01 	lds	r30, 0x010E
     90a:	f0 91 0f 01 	lds	r31, 0x010F
     90e:	8e 9f       	mul	r24, r30
     910:	b0 01       	movw	r22, r0
     912:	8f 9f       	mul	r24, r31
     914:	70 0d       	add	r23, r0
     916:	9e 9f       	mul	r25, r30
     918:	70 0d       	add	r23, r0
     91a:	11 24       	eor	r1, r1
     91c:	cb 01       	movw	r24, r22
     91e:	80 53       	subi	r24, 0x30	; 48
     920:	98 4f       	sbci	r25, 0xF8	; 248
     922:	82 0f       	add	r24, r18
     924:	93 1f       	adc	r25, r19
     926:	90 93 1f 01 	sts	0x011F, r25
     92a:	80 93 1e 01 	sts	0x011E, r24
     92e:	60 91 10 01 	lds	r22, 0x0110
     932:	70 91 11 01 	lds	r23, 0x0111
     936:	46 9f       	mul	r20, r22
     938:	c0 01       	movw	r24, r0
     93a:	47 9f       	mul	r20, r23
     93c:	90 0d       	add	r25, r0
     93e:	56 9f       	mul	r21, r22
     940:	90 0d       	add	r25, r0
     942:	11 24       	eor	r1, r1
     944:	80 53       	subi	r24, 0x30	; 48
     946:	98 4f       	sbci	r25, 0xF8	; 248
     948:	82 0f       	add	r24, r18
     94a:	93 1f       	adc	r25, r19
     94c:	90 93 21 01 	sts	0x0121, r25
     950:	80 93 20 01 	sts	0x0120, r24
     954:	08 95       	ret

00000956 <rest>:
 servo_age(C1,Foot_age);servo_age(C2,Foot_height);
 servo_age(D1,-Foot_age);servo_age(D2,Foot_height);	
}


 void rest(uchar R){
     956:	cf 93       	push	r28
     958:	c8 2f       	mov	r28, r24
	 static uchar R_l=0;
	 if (!(R_l==R))
     95a:	80 91 36 07 	lds	r24, 0x0736
     95e:	8c 17       	cp	r24, r28
     960:	51 f0       	breq	.+20     	; 0x976 <rest+0x20>
	 {time_seve=0;robot_stand(0,-90); }
     962:	10 92 3d 07 	sts	0x073D, r1
     966:	10 92 3c 07 	sts	0x073C, r1
     96a:	66 ea       	ldi	r22, 0xA6	; 166
     96c:	7f ef       	ldi	r23, 0xFF	; 255
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <robot_stand>
	 R_l=R;
     976:	c0 93 36 07 	sts	0x0736, r28
 }
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <robot_move>:
  Foot_height_down -90~0   脚的放下时的角度                             一般值 -90
  Foot_height_up   0~100   抬脚时候 相对于Foot_height_down 抬起多少角度 一般值 90
  step_time    0~65535     每一步间隔时间 单位ms 分辨率20ms             一般值 100
 */
 void robot_move(int x_step,int y_step,int turn_step,int Foot_height_down,int Foot_height_up,unsigned int step_time)
 {  static uint con1,con2;
     97e:	8f 92       	push	r8
     980:	9f 92       	push	r9
     982:	af 92       	push	r10
     984:	bf 92       	push	r11
     986:	cf 92       	push	r12
     988:	df 92       	push	r13
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	ec 01       	movw	r28, r24
     998:	6b 01       	movw	r12, r22
     99a:	5a 01       	movw	r10, r20
     99c:	49 01       	movw	r8, r18
     99e:	97 01       	movw	r18, r14
	 con1=time_seve;con1=con1%(step_time/20*6)/(step_time/20);
     9a0:	ad ec       	ldi	r26, 0xCD	; 205
     9a2:	bc ec       	ldi	r27, 0xCC	; 204
     9a4:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__umulhisi3>
     9a8:	fc 01       	movw	r30, r24
     9aa:	f2 95       	swap	r31
     9ac:	e2 95       	swap	r30
     9ae:	ef 70       	andi	r30, 0x0F	; 15
     9b0:	ef 27       	eor	r30, r31
     9b2:	ff 70       	andi	r31, 0x0F	; 15
     9b4:	ef 27       	eor	r30, r31
     9b6:	bf 01       	movw	r22, r30
     9b8:	66 0f       	add	r22, r22
     9ba:	77 1f       	adc	r23, r23
     9bc:	6e 0f       	add	r22, r30
     9be:	7f 1f       	adc	r23, r31
     9c0:	66 0f       	add	r22, r22
     9c2:	77 1f       	adc	r23, r23
     9c4:	80 91 3c 07 	lds	r24, 0x073C
     9c8:	90 91 3d 07 	lds	r25, 0x073D
     9cc:	0e 94 3d 0b 	call	0x167a	; 0x167a <__udivmodhi4>
     9d0:	bf 01       	movw	r22, r30
     9d2:	0e 94 3d 0b 	call	0x167a	; 0x167a <__udivmodhi4>
     9d6:	fb 01       	movw	r30, r22
     9d8:	70 93 35 07 	sts	0x0735, r23
     9dc:	60 93 34 07 	sts	0x0734, r22
	 if (!(con1==con2))
     9e0:	80 91 32 07 	lds	r24, 0x0732
     9e4:	90 91 33 07 	lds	r25, 0x0733
     9e8:	68 17       	cp	r22, r24
     9ea:	79 07       	cpc	r23, r25
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <robot_move+0x72>
     9ee:	4a c0       	rjmp	.+148    	; 0xa84 <robot_move+0x106>
	 {	 
		 switch (con1)
     9f0:	62 30       	cpi	r22, 0x02	; 2
     9f2:	71 05       	cpc	r23, r1
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <robot_move+0x7a>
     9f6:	c8 c1       	rjmp	.+912    	; 0xd88 <robot_move+0x40a>
     9f8:	08 f4       	brcc	.+2      	; 0x9fc <robot_move+0x7e>
     9fa:	51 c0       	rjmp	.+162    	; 0xa9e <robot_move+0x120>
     9fc:	64 30       	cpi	r22, 0x04	; 4
     9fe:	71 05       	cpc	r23, r1
     a00:	09 f4       	brne	.+2      	; 0xa04 <robot_move+0x86>
     a02:	8f c1       	rjmp	.+798    	; 0xd22 <robot_move+0x3a4>
     a04:	08 f4       	brcc	.+2      	; 0xa08 <robot_move+0x8a>
     a06:	a6 c0       	rjmp	.+332    	; 0xb54 <robot_move+0x1d6>
     a08:	65 30       	cpi	r22, 0x05	; 5
     a0a:	71 05       	cpc	r23, r1
     a0c:	09 f0       	breq	.+2      	; 0xa10 <robot_move+0x92>
     a0e:	84 c1       	rjmp	.+776    	; 0xd18 <robot_move+0x39a>
	unsigned int time_seve=0;	
int servo_Direction[8]={10,10,10,-10,10,10,10,-10},//向上为正方向 顺时针正
	offset_sever=160;//舵机偏移修正值	
void servo_age(uchar number,int age)
{   int age_t;
	if (age>100){age_t=100;}
     a10:	85 e6       	ldi	r24, 0x65	; 101
     a12:	88 16       	cp	r8, r24
     a14:	91 04       	cpc	r9, r1
     a16:	0c f0       	brlt	.+2      	; 0xa1a <robot_move+0x9c>
     a18:	1f c2       	rjmp	.+1086   	; 0xe58 <robot_move+0x4da>
     a1a:	94 01       	movw	r18, r8
     a1c:	4c e9       	ldi	r20, 0x9C	; 156
     a1e:	84 16       	cp	r8, r20
     a20:	4f ef       	ldi	r20, 0xFF	; 255
     a22:	94 06       	cpc	r9, r20
     a24:	0c f4       	brge	.+2      	; 0xa28 <robot_move+0xaa>
     a26:	53 c2       	rjmp	.+1190   	; 0xece <robot_move+0x550>
	else if (age<-100){age_t=-100;}
	else{age_t=age;}
	servo_ch[number]=servo_Direction[number]*age_t+2000+offset_sever;
     a28:	40 91 00 01 	lds	r20, 0x0100
     a2c:	50 91 01 01 	lds	r21, 0x0101
     a30:	60 91 08 01 	lds	r22, 0x0108
     a34:	70 91 09 01 	lds	r23, 0x0109
     a38:	26 9f       	mul	r18, r22
     a3a:	c0 01       	movw	r24, r0
     a3c:	27 9f       	mul	r18, r23
     a3e:	90 0d       	add	r25, r0
     a40:	36 9f       	mul	r19, r22
     a42:	90 0d       	add	r25, r0
     a44:	11 24       	eor	r1, r1
     a46:	80 53       	subi	r24, 0x30	; 48
     a48:	98 4f       	sbci	r25, 0xF8	; 248
     a4a:	84 0f       	add	r24, r20
     a4c:	95 1f       	adc	r25, r21
     a4e:	90 93 19 01 	sts	0x0119, r25
     a52:	80 93 18 01 	sts	0x0118, r24
     a56:	60 91 10 01 	lds	r22, 0x0110
     a5a:	70 91 11 01 	lds	r23, 0x0111
     a5e:	26 9f       	mul	r18, r22
     a60:	c0 01       	movw	r24, r0
     a62:	27 9f       	mul	r18, r23
     a64:	90 0d       	add	r25, r0
     a66:	36 9f       	mul	r19, r22
     a68:	90 0d       	add	r25, r0
     a6a:	11 24       	eor	r1, r1
     a6c:	80 53       	subi	r24, 0x30	; 48
     a6e:	98 4f       	sbci	r25, 0xF8	; 248
     a70:	84 0f       	add	r24, r20
     a72:	95 1f       	adc	r25, r21
     a74:	90 93 21 01 	sts	0x0121, r25
     a78:	80 93 20 01 	sts	0x0120, r24
			 case 4: servo_age(B1,-1*y_step- turn_step+x_step);servo_age(D1,y_step- turn_step-x_step);break;//旋转
			 case 5: servo_age(B2,Foot_height_down);servo_age(D2,Foot_height_down);break;//放下
			 
			 default:time_seve=0;break;	
	      }
	    con2=con1;
     a7c:	f0 93 33 07 	sts	0x0733, r31
     a80:	e0 93 32 07 	sts	0x0732, r30
	 }
 }
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	df 90       	pop	r13
     a92:	cf 90       	pop	r12
     a94:	bf 90       	pop	r11
     a96:	af 90       	pop	r10
     a98:	9f 90       	pop	r9
     a9a:	8f 90       	pop	r8
     a9c:	08 95       	ret
 void robot_move(int x_step,int y_step,int turn_step,int Foot_height_down,int Foot_height_up,unsigned int step_time)
 {  static uint con1,con2;
	 con1=time_seve;con1=con1%(step_time/20*6)/(step_time/20);
	 if (!(con1==con2))
	 {	 
		 switch (con1)
     a9e:	30 97       	sbiw	r30, 0x00	; 0
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <robot_move+0x126>
     aa2:	bc c0       	rjmp	.+376    	; 0xc1c <robot_move+0x29e>
     aa4:	61 30       	cpi	r22, 0x01	; 1
     aa6:	71 05       	cpc	r23, r1
     aa8:	09 f0       	breq	.+2      	; 0xaac <robot_move+0x12e>
     aaa:	36 c1       	rjmp	.+620    	; 0xd18 <robot_move+0x39a>
		 {
			 case 0: servo_age(A2,Foot_height_up+Foot_height_down);servo_age(C2,Foot_height_up+Foot_height_down);//抬起
			         servo_age(B1,y_step+ turn_step-x_step);servo_age(D1,-1*y_step+ turn_step+x_step);break;
			 case 1: servo_age(A1,-1*y_step- turn_step-x_step);	servo_age(C1,y_step- turn_step+x_step);break;
     aac:	88 27       	eor	r24, r24
     aae:	99 27       	eor	r25, r25
     ab0:	8c 19       	sub	r24, r12
     ab2:	9d 09       	sbc	r25, r13
     ab4:	8a 19       	sub	r24, r10
     ab6:	9b 09       	sbc	r25, r11
     ab8:	8c 1b       	sub	r24, r28
     aba:	9d 0b       	sbc	r25, r29
     abc:	8c 39       	cpi	r24, 0x9C	; 156
     abe:	2f ef       	ldi	r18, 0xFF	; 255
     ac0:	92 07       	cpc	r25, r18
     ac2:	14 f4       	brge	.+4      	; 0xac8 <robot_move+0x14a>
     ac4:	8c e9       	ldi	r24, 0x9C	; 156
     ac6:	9f ef       	ldi	r25, 0xFF	; 255
     ac8:	20 91 00 01 	lds	r18, 0x0100
     acc:	30 91 01 01 	lds	r19, 0x0101
     ad0:	85 36       	cpi	r24, 0x65	; 101
     ad2:	91 05       	cpc	r25, r1
     ad4:	14 f0       	brlt	.+4      	; 0xada <robot_move+0x15c>
     ad6:	84 e6       	ldi	r24, 0x64	; 100
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	60 91 02 01 	lds	r22, 0x0102
     ade:	70 91 03 01 	lds	r23, 0x0103
     ae2:	86 9f       	mul	r24, r22
     ae4:	a0 01       	movw	r20, r0
     ae6:	87 9f       	mul	r24, r23
     ae8:	50 0d       	add	r21, r0
     aea:	96 9f       	mul	r25, r22
     aec:	50 0d       	add	r21, r0
     aee:	11 24       	eor	r1, r1
     af0:	ca 01       	movw	r24, r20
     af2:	80 53       	subi	r24, 0x30	; 48
     af4:	98 4f       	sbci	r25, 0xF8	; 248
     af6:	82 0f       	add	r24, r18
     af8:	93 1f       	adc	r25, r19
     afa:	90 93 13 01 	sts	0x0113, r25
     afe:	80 93 12 01 	sts	0x0112, r24
     b02:	c6 01       	movw	r24, r12
     b04:	8a 19       	sub	r24, r10
     b06:	9b 09       	sbc	r25, r11
     b08:	8c 0f       	add	r24, r28
     b0a:	9d 1f       	adc	r25, r29
     b0c:	8c 39       	cpi	r24, 0x9C	; 156
     b0e:	4f ef       	ldi	r20, 0xFF	; 255
     b10:	94 07       	cpc	r25, r20
     b12:	14 f4       	brge	.+4      	; 0xb18 <robot_move+0x19a>
     b14:	8c e9       	ldi	r24, 0x9C	; 156
     b16:	9f ef       	ldi	r25, 0xFF	; 255
     b18:	bc 01       	movw	r22, r24
     b1a:	85 36       	cpi	r24, 0x65	; 101
     b1c:	91 05       	cpc	r25, r1
     b1e:	14 f0       	brlt	.+4      	; 0xb24 <robot_move+0x1a6>
     b20:	64 e6       	ldi	r22, 0x64	; 100
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	40 91 0a 01 	lds	r20, 0x010A
     b28:	50 91 0b 01 	lds	r21, 0x010B
     b2c:	64 9f       	mul	r22, r20
     b2e:	c0 01       	movw	r24, r0
     b30:	65 9f       	mul	r22, r21
     b32:	90 0d       	add	r25, r0
     b34:	74 9f       	mul	r23, r20
     b36:	90 0d       	add	r25, r0
     b38:	11 24       	eor	r1, r1
     b3a:	80 53       	subi	r24, 0x30	; 48
     b3c:	98 4f       	sbci	r25, 0xF8	; 248
     b3e:	82 0f       	add	r24, r18
     b40:	93 1f       	adc	r25, r19
     b42:	90 93 1b 01 	sts	0x011B, r25
     b46:	80 93 1a 01 	sts	0x011A, r24
			 case 4: servo_age(B1,-1*y_step- turn_step+x_step);servo_age(D1,y_step- turn_step-x_step);break;//旋转
			 case 5: servo_age(B2,Foot_height_down);servo_age(D2,Foot_height_down);break;//放下
			 
			 default:time_seve=0;break;	
	      }
	    con2=con1;
     b4a:	f0 93 33 07 	sts	0x0733, r31
     b4e:	e0 93 32 07 	sts	0x0732, r30
     b52:	98 cf       	rjmp	.-208    	; 0xa84 <robot_move+0x106>
			 case 0: servo_age(A2,Foot_height_up+Foot_height_down);servo_age(C2,Foot_height_up+Foot_height_down);//抬起
			         servo_age(B1,y_step+ turn_step-x_step);servo_age(D1,-1*y_step+ turn_step+x_step);break;
			 case 1: servo_age(A1,-1*y_step- turn_step-x_step);	servo_age(C1,y_step- turn_step+x_step);break;
			 case 2: servo_age(A2,Foot_height_down);servo_age(C2,Foot_height_down);break; //放下
			 
			 case 3: servo_age(B2,Foot_height_up+Foot_height_down);servo_age(D2,Foot_height_up+Foot_height_down);//抬起
     b54:	08 0d       	add	r16, r8
     b56:	19 1d       	adc	r17, r9
	unsigned int time_seve=0;	
int servo_Direction[8]={10,10,10,-10,10,10,10,-10},//向上为正方向 顺时针正
	offset_sever=160;//舵机偏移修正值	
void servo_age(uchar number,int age)
{   int age_t;
	if (age>100){age_t=100;}
     b58:	05 36       	cpi	r16, 0x65	; 101
     b5a:	11 05       	cpc	r17, r1
     b5c:	0c f0       	brlt	.+2      	; 0xb60 <robot_move+0x1e2>
     b5e:	95 c1       	rjmp	.+810    	; 0xe8a <robot_move+0x50c>
     b60:	0c 39       	cpi	r16, 0x9C	; 156
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	18 07       	cpc	r17, r24
     b66:	0c f4       	brge	.+2      	; 0xb6a <robot_move+0x1ec>
     b68:	af c1       	rjmp	.+862    	; 0xec8 <robot_move+0x54a>
	else if (age<-100){age_t=-100;}
	else{age_t=age;}
	servo_ch[number]=servo_Direction[number]*age_t+2000+offset_sever;
     b6a:	20 91 00 01 	lds	r18, 0x0100
     b6e:	30 91 01 01 	lds	r19, 0x0101
     b72:	40 91 08 01 	lds	r20, 0x0108
     b76:	50 91 09 01 	lds	r21, 0x0109
     b7a:	04 9f       	mul	r16, r20
     b7c:	c0 01       	movw	r24, r0
     b7e:	05 9f       	mul	r16, r21
     b80:	90 0d       	add	r25, r0
     b82:	14 9f       	mul	r17, r20
     b84:	90 0d       	add	r25, r0
     b86:	11 24       	eor	r1, r1
     b88:	80 53       	subi	r24, 0x30	; 48
     b8a:	98 4f       	sbci	r25, 0xF8	; 248
     b8c:	82 0f       	add	r24, r18
     b8e:	93 1f       	adc	r25, r19
     b90:	90 93 19 01 	sts	0x0119, r25
     b94:	80 93 18 01 	sts	0x0118, r24
     b98:	40 91 10 01 	lds	r20, 0x0110
     b9c:	50 91 11 01 	lds	r21, 0x0111
     ba0:	04 9f       	mul	r16, r20
     ba2:	c0 01       	movw	r24, r0
     ba4:	05 9f       	mul	r16, r21
     ba6:	90 0d       	add	r25, r0
     ba8:	14 9f       	mul	r17, r20
     baa:	90 0d       	add	r25, r0
     bac:	11 24       	eor	r1, r1
     bae:	80 53       	subi	r24, 0x30	; 48
     bb0:	98 4f       	sbci	r25, 0xF8	; 248
     bb2:	82 0f       	add	r24, r18
     bb4:	93 1f       	adc	r25, r19
     bb6:	90 93 21 01 	sts	0x0121, r25
     bba:	80 93 20 01 	sts	0x0120, r24
			         servo_age(A1,y_step+ turn_step+x_step);servo_age(C1,-1*y_step+ turn_step-x_step);break;
     bbe:	c6 01       	movw	r24, r12
     bc0:	8a 0d       	add	r24, r10
     bc2:	9b 1d       	adc	r25, r11
     bc4:	8c 0f       	add	r24, r28
     bc6:	9d 1f       	adc	r25, r29
     bc8:	8c 39       	cpi	r24, 0x9C	; 156
     bca:	4f ef       	ldi	r20, 0xFF	; 255
     bcc:	94 07       	cpc	r25, r20
     bce:	14 f4       	brge	.+4      	; 0xbd4 <robot_move+0x256>
     bd0:	8c e9       	ldi	r24, 0x9C	; 156
     bd2:	9f ef       	ldi	r25, 0xFF	; 255
     bd4:	85 36       	cpi	r24, 0x65	; 101
     bd6:	91 05       	cpc	r25, r1
     bd8:	14 f0       	brlt	.+4      	; 0xbde <robot_move+0x260>
     bda:	84 e6       	ldi	r24, 0x64	; 100
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	60 91 02 01 	lds	r22, 0x0102
     be2:	70 91 03 01 	lds	r23, 0x0103
     be6:	86 9f       	mul	r24, r22
     be8:	a0 01       	movw	r20, r0
     bea:	87 9f       	mul	r24, r23
     bec:	50 0d       	add	r21, r0
     bee:	96 9f       	mul	r25, r22
     bf0:	50 0d       	add	r21, r0
     bf2:	11 24       	eor	r1, r1
     bf4:	ca 01       	movw	r24, r20
     bf6:	80 53       	subi	r24, 0x30	; 48
     bf8:	98 4f       	sbci	r25, 0xF8	; 248
     bfa:	82 0f       	add	r24, r18
     bfc:	93 1f       	adc	r25, r19
     bfe:	90 93 13 01 	sts	0x0113, r25
     c02:	80 93 12 01 	sts	0x0112, r24
     c06:	c5 01       	movw	r24, r10
     c08:	8c 19       	sub	r24, r12
     c0a:	9d 09       	sbc	r25, r13
     c0c:	8c 1b       	sub	r24, r28
     c0e:	9d 0b       	sbc	r25, r29
     c10:	8c 39       	cpi	r24, 0x9C	; 156
     c12:	4f ef       	ldi	r20, 0xFF	; 255
     c14:	94 07       	cpc	r25, r20
     c16:	0c f0       	brlt	.+2      	; 0xc1a <robot_move+0x29c>
     c18:	7f cf       	rjmp	.-258    	; 0xb18 <robot_move+0x19a>
     c1a:	7c cf       	rjmp	.-264    	; 0xb14 <robot_move+0x196>
	 con1=time_seve;con1=con1%(step_time/20*6)/(step_time/20);
	 if (!(con1==con2))
	 {	 
		 switch (con1)
		 {
			 case 0: servo_age(A2,Foot_height_up+Foot_height_down);servo_age(C2,Foot_height_up+Foot_height_down);//抬起
     c1c:	08 0d       	add	r16, r8
     c1e:	19 1d       	adc	r17, r9
	unsigned int time_seve=0;	
int servo_Direction[8]={10,10,10,-10,10,10,10,-10},//向上为正方向 顺时针正
	offset_sever=160;//舵机偏移修正值	
void servo_age(uchar number,int age)
{   int age_t;
	if (age>100){age_t=100;}
     c20:	05 36       	cpi	r16, 0x65	; 101
     c22:	11 05       	cpc	r17, r1
     c24:	0c f0       	brlt	.+2      	; 0xc28 <robot_move+0x2aa>
     c26:	ff c0       	rjmp	.+510    	; 0xe26 <robot_move+0x4a8>
     c28:	0c 39       	cpi	r16, 0x9C	; 156
     c2a:	2f ef       	ldi	r18, 0xFF	; 255
     c2c:	12 07       	cpc	r17, r18
     c2e:	0c f4       	brge	.+2      	; 0xc32 <robot_move+0x2b4>
     c30:	48 c1       	rjmp	.+656    	; 0xec2 <robot_move+0x544>
	else if (age<-100){age_t=-100;}
	else{age_t=age;}
	servo_ch[number]=servo_Direction[number]*age_t+2000+offset_sever;
     c32:	20 91 00 01 	lds	r18, 0x0100
     c36:	30 91 01 01 	lds	r19, 0x0101
     c3a:	40 91 04 01 	lds	r20, 0x0104
     c3e:	50 91 05 01 	lds	r21, 0x0105
     c42:	04 9f       	mul	r16, r20
     c44:	c0 01       	movw	r24, r0
     c46:	05 9f       	mul	r16, r21
     c48:	90 0d       	add	r25, r0
     c4a:	14 9f       	mul	r17, r20
     c4c:	90 0d       	add	r25, r0
     c4e:	11 24       	eor	r1, r1
     c50:	80 53       	subi	r24, 0x30	; 48
     c52:	98 4f       	sbci	r25, 0xF8	; 248
     c54:	82 0f       	add	r24, r18
     c56:	93 1f       	adc	r25, r19
     c58:	90 93 15 01 	sts	0x0115, r25
     c5c:	80 93 14 01 	sts	0x0114, r24
     c60:	40 91 0c 01 	lds	r20, 0x010C
     c64:	50 91 0d 01 	lds	r21, 0x010D
     c68:	04 9f       	mul	r16, r20
     c6a:	c0 01       	movw	r24, r0
     c6c:	05 9f       	mul	r16, r21
     c6e:	90 0d       	add	r25, r0
     c70:	14 9f       	mul	r17, r20
     c72:	90 0d       	add	r25, r0
     c74:	11 24       	eor	r1, r1
     c76:	80 53       	subi	r24, 0x30	; 48
     c78:	98 4f       	sbci	r25, 0xF8	; 248
     c7a:	82 0f       	add	r24, r18
     c7c:	93 1f       	adc	r25, r19
     c7e:	90 93 1d 01 	sts	0x011D, r25
     c82:	80 93 1c 01 	sts	0x011C, r24
			         servo_age(B1,y_step+ turn_step-x_step);servo_age(D1,-1*y_step+ turn_step+x_step);break;
     c86:	c6 01       	movw	r24, r12
     c88:	8a 0d       	add	r24, r10
     c8a:	9b 1d       	adc	r25, r11
     c8c:	8c 1b       	sub	r24, r28
     c8e:	9d 0b       	sbc	r25, r29
     c90:	8c 39       	cpi	r24, 0x9C	; 156
     c92:	4f ef       	ldi	r20, 0xFF	; 255
     c94:	94 07       	cpc	r25, r20
     c96:	14 f4       	brge	.+4      	; 0xc9c <robot_move+0x31e>
     c98:	8c e9       	ldi	r24, 0x9C	; 156
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	85 36       	cpi	r24, 0x65	; 101
     c9e:	91 05       	cpc	r25, r1
     ca0:	14 f0       	brlt	.+4      	; 0xca6 <robot_move+0x328>
     ca2:	84 e6       	ldi	r24, 0x64	; 100
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	60 91 06 01 	lds	r22, 0x0106
     caa:	70 91 07 01 	lds	r23, 0x0107
     cae:	86 9f       	mul	r24, r22
     cb0:	a0 01       	movw	r20, r0
     cb2:	87 9f       	mul	r24, r23
     cb4:	50 0d       	add	r21, r0
     cb6:	96 9f       	mul	r25, r22
     cb8:	50 0d       	add	r21, r0
     cba:	11 24       	eor	r1, r1
     cbc:	ca 01       	movw	r24, r20
     cbe:	80 53       	subi	r24, 0x30	; 48
     cc0:	98 4f       	sbci	r25, 0xF8	; 248
     cc2:	82 0f       	add	r24, r18
     cc4:	93 1f       	adc	r25, r19
     cc6:	90 93 17 01 	sts	0x0117, r25
     cca:	80 93 16 01 	sts	0x0116, r24
     cce:	c5 01       	movw	r24, r10
     cd0:	8c 19       	sub	r24, r12
     cd2:	9d 09       	sbc	r25, r13
     cd4:	8c 0f       	add	r24, r28
     cd6:	9d 1f       	adc	r25, r29
     cd8:	8c 39       	cpi	r24, 0x9C	; 156
     cda:	4f ef       	ldi	r20, 0xFF	; 255
     cdc:	94 07       	cpc	r25, r20
     cde:	14 f4       	brge	.+4      	; 0xce4 <robot_move+0x366>
     ce0:	8c e9       	ldi	r24, 0x9C	; 156
     ce2:	9f ef       	ldi	r25, 0xFF	; 255
     ce4:	bc 01       	movw	r22, r24
     ce6:	85 36       	cpi	r24, 0x65	; 101
     ce8:	91 05       	cpc	r25, r1
     cea:	14 f0       	brlt	.+4      	; 0xcf0 <robot_move+0x372>
     cec:	64 e6       	ldi	r22, 0x64	; 100
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	40 91 0e 01 	lds	r20, 0x010E
     cf4:	50 91 0f 01 	lds	r21, 0x010F
     cf8:	64 9f       	mul	r22, r20
     cfa:	c0 01       	movw	r24, r0
     cfc:	65 9f       	mul	r22, r21
     cfe:	90 0d       	add	r25, r0
     d00:	74 9f       	mul	r23, r20
     d02:	90 0d       	add	r25, r0
     d04:	11 24       	eor	r1, r1
     d06:	80 53       	subi	r24, 0x30	; 48
     d08:	98 4f       	sbci	r25, 0xF8	; 248
     d0a:	82 0f       	add	r24, r18
     d0c:	93 1f       	adc	r25, r19
     d0e:	90 93 1f 01 	sts	0x011F, r25
     d12:	80 93 1e 01 	sts	0x011E, r24
     d16:	19 cf       	rjmp	.-462    	; 0xb4a <robot_move+0x1cc>
			 case 3: servo_age(B2,Foot_height_up+Foot_height_down);servo_age(D2,Foot_height_up+Foot_height_down);//抬起
			         servo_age(A1,y_step+ turn_step+x_step);servo_age(C1,-1*y_step+ turn_step-x_step);break;
			 case 4: servo_age(B1,-1*y_step- turn_step+x_step);servo_age(D1,y_step- turn_step-x_step);break;//旋转
			 case 5: servo_age(B2,Foot_height_down);servo_age(D2,Foot_height_down);break;//放下
			 
			 default:time_seve=0;break;	
     d18:	10 92 3d 07 	sts	0x073D, r1
     d1c:	10 92 3c 07 	sts	0x073C, r1
     d20:	14 cf       	rjmp	.-472    	; 0xb4a <robot_move+0x1cc>
			 case 1: servo_age(A1,-1*y_step- turn_step-x_step);	servo_age(C1,y_step- turn_step+x_step);break;
			 case 2: servo_age(A2,Foot_height_down);servo_age(C2,Foot_height_down);break; //放下
			 
			 case 3: servo_age(B2,Foot_height_up+Foot_height_down);servo_age(D2,Foot_height_up+Foot_height_down);//抬起
			         servo_age(A1,y_step+ turn_step+x_step);servo_age(C1,-1*y_step+ turn_step-x_step);break;
			 case 4: servo_age(B1,-1*y_step- turn_step+x_step);servo_age(D1,y_step- turn_step-x_step);break;//旋转
     d22:	ce 01       	movw	r24, r28
     d24:	8a 19       	sub	r24, r10
     d26:	9b 09       	sbc	r25, r11
     d28:	8c 19       	sub	r24, r12
     d2a:	9d 09       	sbc	r25, r13
     d2c:	8c 39       	cpi	r24, 0x9C	; 156
     d2e:	2f ef       	ldi	r18, 0xFF	; 255
     d30:	92 07       	cpc	r25, r18
     d32:	14 f4       	brge	.+4      	; 0xd38 <robot_move+0x3ba>
     d34:	8c e9       	ldi	r24, 0x9C	; 156
     d36:	9f ef       	ldi	r25, 0xFF	; 255
     d38:	20 91 00 01 	lds	r18, 0x0100
     d3c:	30 91 01 01 	lds	r19, 0x0101
     d40:	85 36       	cpi	r24, 0x65	; 101
     d42:	91 05       	cpc	r25, r1
     d44:	14 f0       	brlt	.+4      	; 0xd4a <robot_move+0x3cc>
     d46:	84 e6       	ldi	r24, 0x64	; 100
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	60 91 06 01 	lds	r22, 0x0106
     d4e:	70 91 07 01 	lds	r23, 0x0107
     d52:	86 9f       	mul	r24, r22
     d54:	a0 01       	movw	r20, r0
     d56:	87 9f       	mul	r24, r23
     d58:	50 0d       	add	r21, r0
     d5a:	96 9f       	mul	r25, r22
     d5c:	50 0d       	add	r21, r0
     d5e:	11 24       	eor	r1, r1
     d60:	ca 01       	movw	r24, r20
     d62:	80 53       	subi	r24, 0x30	; 48
     d64:	98 4f       	sbci	r25, 0xF8	; 248
     d66:	82 0f       	add	r24, r18
     d68:	93 1f       	adc	r25, r19
     d6a:	90 93 17 01 	sts	0x0117, r25
     d6e:	80 93 16 01 	sts	0x0116, r24
     d72:	c6 01       	movw	r24, r12
     d74:	8a 19       	sub	r24, r10
     d76:	9b 09       	sbc	r25, r11
     d78:	8c 1b       	sub	r24, r28
     d7a:	9d 0b       	sbc	r25, r29
     d7c:	8c 39       	cpi	r24, 0x9C	; 156
     d7e:	4f ef       	ldi	r20, 0xFF	; 255
     d80:	94 07       	cpc	r25, r20
     d82:	0c f0       	brlt	.+2      	; 0xd86 <robot_move+0x408>
     d84:	af cf       	rjmp	.-162    	; 0xce4 <robot_move+0x366>
     d86:	ac cf       	rjmp	.-168    	; 0xce0 <robot_move+0x362>
	unsigned int time_seve=0;	
int servo_Direction[8]={10,10,10,-10,10,10,10,-10},//向上为正方向 顺时针正
	offset_sever=160;//舵机偏移修正值	
void servo_age(uchar number,int age)
{   int age_t;
	if (age>100){age_t=100;}
     d88:	85 e6       	ldi	r24, 0x65	; 101
     d8a:	88 16       	cp	r8, r24
     d8c:	91 04       	cpc	r9, r1
     d8e:	94 f5       	brge	.+100    	; 0xdf4 <robot_move+0x476>
     d90:	94 01       	movw	r18, r8
     d92:	4c e9       	ldi	r20, 0x9C	; 156
     d94:	84 16       	cp	r8, r20
     d96:	4f ef       	ldi	r20, 0xFF	; 255
     d98:	94 06       	cpc	r9, r20
     d9a:	0c f4       	brge	.+2      	; 0xd9e <robot_move+0x420>
     d9c:	8f c0       	rjmp	.+286    	; 0xebc <robot_move+0x53e>
	else if (age<-100){age_t=-100;}
	else{age_t=age;}
	servo_ch[number]=servo_Direction[number]*age_t+2000+offset_sever;
     d9e:	40 91 00 01 	lds	r20, 0x0100
     da2:	50 91 01 01 	lds	r21, 0x0101
     da6:	60 91 04 01 	lds	r22, 0x0104
     daa:	70 91 05 01 	lds	r23, 0x0105
     dae:	26 9f       	mul	r18, r22
     db0:	c0 01       	movw	r24, r0
     db2:	27 9f       	mul	r18, r23
     db4:	90 0d       	add	r25, r0
     db6:	36 9f       	mul	r19, r22
     db8:	90 0d       	add	r25, r0
     dba:	11 24       	eor	r1, r1
     dbc:	80 53       	subi	r24, 0x30	; 48
     dbe:	98 4f       	sbci	r25, 0xF8	; 248
     dc0:	84 0f       	add	r24, r20
     dc2:	95 1f       	adc	r25, r21
     dc4:	90 93 15 01 	sts	0x0115, r25
     dc8:	80 93 14 01 	sts	0x0114, r24
     dcc:	60 91 0c 01 	lds	r22, 0x010C
     dd0:	70 91 0d 01 	lds	r23, 0x010D
     dd4:	26 9f       	mul	r18, r22
     dd6:	c0 01       	movw	r24, r0
     dd8:	27 9f       	mul	r18, r23
     dda:	90 0d       	add	r25, r0
     ddc:	36 9f       	mul	r19, r22
     dde:	90 0d       	add	r25, r0
     de0:	11 24       	eor	r1, r1
     de2:	80 53       	subi	r24, 0x30	; 48
     de4:	98 4f       	sbci	r25, 0xF8	; 248
     de6:	84 0f       	add	r24, r20
     de8:	95 1f       	adc	r25, r21
     dea:	90 93 1d 01 	sts	0x011D, r25
     dee:	80 93 1c 01 	sts	0x011C, r24
     df2:	ab ce       	rjmp	.-682    	; 0xb4a <robot_move+0x1cc>
     df4:	40 91 00 01 	lds	r20, 0x0100
     df8:	50 91 01 01 	lds	r21, 0x0101
     dfc:	20 91 04 01 	lds	r18, 0x0104
     e00:	30 91 05 01 	lds	r19, 0x0105
     e04:	64 e6       	ldi	r22, 0x64	; 100
     e06:	62 9f       	mul	r22, r18
     e08:	c0 01       	movw	r24, r0
     e0a:	63 9f       	mul	r22, r19
     e0c:	90 0d       	add	r25, r0
     e0e:	11 24       	eor	r1, r1
     e10:	80 53       	subi	r24, 0x30	; 48
     e12:	98 4f       	sbci	r25, 0xF8	; 248
     e14:	84 0f       	add	r24, r20
     e16:	95 1f       	adc	r25, r21
     e18:	90 93 15 01 	sts	0x0115, r25
     e1c:	80 93 14 01 	sts	0x0114, r24
	unsigned int time_seve=0;	
int servo_Direction[8]={10,10,10,-10,10,10,10,-10},//向上为正方向 顺时针正
	offset_sever=160;//舵机偏移修正值	
void servo_age(uchar number,int age)
{   int age_t;
	if (age>100){age_t=100;}
     e20:	24 e6       	ldi	r18, 0x64	; 100
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	d3 cf       	rjmp	.-90     	; 0xdcc <robot_move+0x44e>
	else if (age<-100){age_t=-100;}
	else{age_t=age;}
	servo_ch[number]=servo_Direction[number]*age_t+2000+offset_sever;
     e26:	20 91 00 01 	lds	r18, 0x0100
     e2a:	30 91 01 01 	lds	r19, 0x0101
     e2e:	40 91 04 01 	lds	r20, 0x0104
     e32:	50 91 05 01 	lds	r21, 0x0105
     e36:	64 e6       	ldi	r22, 0x64	; 100
     e38:	64 9f       	mul	r22, r20
     e3a:	c0 01       	movw	r24, r0
     e3c:	65 9f       	mul	r22, r21
     e3e:	90 0d       	add	r25, r0
     e40:	11 24       	eor	r1, r1
     e42:	80 53       	subi	r24, 0x30	; 48
     e44:	98 4f       	sbci	r25, 0xF8	; 248
     e46:	82 0f       	add	r24, r18
     e48:	93 1f       	adc	r25, r19
     e4a:	90 93 15 01 	sts	0x0115, r25
     e4e:	80 93 14 01 	sts	0x0114, r24
	unsigned int time_seve=0;	
int servo_Direction[8]={10,10,10,-10,10,10,10,-10},//向上为正方向 顺时针正
	offset_sever=160;//舵机偏移修正值	
void servo_age(uchar number,int age)
{   int age_t;
	if (age>100){age_t=100;}
     e52:	04 e6       	ldi	r16, 0x64	; 100
     e54:	10 e0       	ldi	r17, 0x00	; 0
     e56:	04 cf       	rjmp	.-504    	; 0xc60 <robot_move+0x2e2>
	else if (age<-100){age_t=-100;}
	else{age_t=age;}
	servo_ch[number]=servo_Direction[number]*age_t+2000+offset_sever;
     e58:	40 91 00 01 	lds	r20, 0x0100
     e5c:	50 91 01 01 	lds	r21, 0x0101
     e60:	20 91 08 01 	lds	r18, 0x0108
     e64:	30 91 09 01 	lds	r19, 0x0109
     e68:	64 e6       	ldi	r22, 0x64	; 100
     e6a:	62 9f       	mul	r22, r18
     e6c:	c0 01       	movw	r24, r0
     e6e:	63 9f       	mul	r22, r19
     e70:	90 0d       	add	r25, r0
     e72:	11 24       	eor	r1, r1
     e74:	80 53       	subi	r24, 0x30	; 48
     e76:	98 4f       	sbci	r25, 0xF8	; 248
     e78:	84 0f       	add	r24, r20
     e7a:	95 1f       	adc	r25, r21
     e7c:	90 93 19 01 	sts	0x0119, r25
     e80:	80 93 18 01 	sts	0x0118, r24
	unsigned int time_seve=0;	
int servo_Direction[8]={10,10,10,-10,10,10,10,-10},//向上为正方向 顺时针正
	offset_sever=160;//舵机偏移修正值	
void servo_age(uchar number,int age)
{   int age_t;
	if (age>100){age_t=100;}
     e84:	24 e6       	ldi	r18, 0x64	; 100
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	e6 cd       	rjmp	.-1076   	; 0xa56 <robot_move+0xd8>
	else if (age<-100){age_t=-100;}
	else{age_t=age;}
	servo_ch[number]=servo_Direction[number]*age_t+2000+offset_sever;
     e8a:	20 91 00 01 	lds	r18, 0x0100
     e8e:	30 91 01 01 	lds	r19, 0x0101
     e92:	40 91 08 01 	lds	r20, 0x0108
     e96:	50 91 09 01 	lds	r21, 0x0109
     e9a:	64 e6       	ldi	r22, 0x64	; 100
     e9c:	64 9f       	mul	r22, r20
     e9e:	c0 01       	movw	r24, r0
     ea0:	65 9f       	mul	r22, r21
     ea2:	90 0d       	add	r25, r0
     ea4:	11 24       	eor	r1, r1
     ea6:	80 53       	subi	r24, 0x30	; 48
     ea8:	98 4f       	sbci	r25, 0xF8	; 248
     eaa:	82 0f       	add	r24, r18
     eac:	93 1f       	adc	r25, r19
     eae:	90 93 19 01 	sts	0x0119, r25
     eb2:	80 93 18 01 	sts	0x0118, r24
	unsigned int time_seve=0;	
int servo_Direction[8]={10,10,10,-10,10,10,10,-10},//向上为正方向 顺时针正
	offset_sever=160;//舵机偏移修正值	
void servo_age(uchar number,int age)
{   int age_t;
	if (age>100){age_t=100;}
     eb6:	04 e6       	ldi	r16, 0x64	; 100
     eb8:	10 e0       	ldi	r17, 0x00	; 0
     eba:	6e ce       	rjmp	.-804    	; 0xb98 <robot_move+0x21a>
     ebc:	2c e9       	ldi	r18, 0x9C	; 156
     ebe:	3f ef       	ldi	r19, 0xFF	; 255
     ec0:	6e cf       	rjmp	.-292    	; 0xd9e <robot_move+0x420>
     ec2:	0c e9       	ldi	r16, 0x9C	; 156
     ec4:	1f ef       	ldi	r17, 0xFF	; 255
     ec6:	b5 ce       	rjmp	.-662    	; 0xc32 <robot_move+0x2b4>
     ec8:	0c e9       	ldi	r16, 0x9C	; 156
     eca:	1f ef       	ldi	r17, 0xFF	; 255
     ecc:	4e ce       	rjmp	.-868    	; 0xb6a <robot_move+0x1ec>
     ece:	2c e9       	ldi	r18, 0x9C	; 156
     ed0:	3f ef       	ldi	r19, 0xFF	; 255
     ed2:	aa cd       	rjmp	.-1196   	; 0xa28 <robot_move+0xaa>

00000ed4 <main>:
    }
}

void port_init(void)
{
	DDRB = 0xff;        //pb4 0 miso ????11110111
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	84 b9       	out	0x04, r24	; 4
	PORTB= 0xff;
     ed8:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xff; 		   //PC输入
     eda:	87 b9       	out	0x07, r24	; 7
	PORTC= 0xff; 		 // 无电阻 减少干扰
     edc:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFE;              //???3??????????
     ede:	8e ef       	ldi	r24, 0xFE	; 254
     ee0:	8a b9       	out	0x0a, r24	; 10
	PORTD=0xf0;//这个端口设置如果放到后面单独开启这个蓝牙模块  不响应不知道为什么
     ee2:	80 ef       	ldi	r24, 0xF0	; 240
     ee4:	8b b9       	out	0x0b, r24	; 11
unsigned char bb=0;

float Battery_voltage;     
int main(void)
{   port_init();
	OledInit ();
     ee6:	0e 94 95 00 	call	0x12a	; 0x12a <OledInit>
   {   pp=0;
	   TCCR1B=0x02;
	}
}
void timer1_init(void)//8路舵机占用定时器1
{  SREG = 0x80;
     eea:	20 e8       	ldi	r18, 0x80	; 128
     eec:	2f bf       	out	0x3f, r18	; 63
	TCCR1A=0x00;
     eee:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=0x02;
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	80 93 81 00 	sts	0x0081, r24
	TCCR1C=0x00;		// T/C1工作于普通模式，8分频
     ef8:	10 92 82 00 	sts	0x0082, r1
	TIMSK1=0x01;        //溢出中断使能
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	80 93 6f 00 	sts	0x006F, r24
	TCNT1=0x0BDC;
     f02:	8c ed       	ldi	r24, 0xDC	; 220
     f04:	9b e0       	ldi	r25, 0x0B	; 11
     f06:	90 93 85 00 	sts	0x0085, r25
     f0a:	80 93 84 00 	sts	0x0084, r24
/********AD转换初始化********/
void adc_init(void)
{   ADCSRA = 0x00;  //ADC控制和状态寄存器清零
     f0e:	10 92 7a 00 	sts	0x007A, r1
	ADMUX = 0x46; //2.56V 的片内基准电压源， AREF 引脚外加滤波电容 模拟通道6
     f12:	86 e4       	ldi	r24, 0x46	; 70
     f14:	80 93 7c 00 	sts	0x007C, r24
	ACSR=1<<ACD;//模拟比较器禁用
     f18:	20 bf       	out	0x30, r18	; 48
	ADCSRA = 0x83;  // ADC 使能,8分频因子
     f1a:	83 e8       	ldi	r24, 0x83	; 131
     f1c:	80 93 7a 00 	sts	0x007A, r24
unsigned int RX_Data=0;
unsigned char RX_Flag=0,TX_Data=0;
void USART_Init( unsigned int baud )
{
	/*设置波特率*/
	UBRR0H = (unsigned char)(baud>>8);
     f20:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)baud;
     f24:	88 e0       	ldi	r24, 0x08	; 8
     f26:	80 93 c4 00 	sts	0x00C4, r24
	/* 接收器与发送器使能*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     f2a:	88 e1       	ldi	r24, 0x18	; 24
     f2c:	80 93 c1 00 	sts	0x00C1, r24
	/* 设置帧格式: 8 个数据位, 1 个停止位 */
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
     f30:	86 e0       	ldi	r24, 0x06	; 6
     f32:	80 93 c2 00 	sts	0x00C2, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f36:	8f e3       	ldi	r24, 0x3F	; 63
     f38:	9c e9       	ldi	r25, 0x9C	; 156
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <main+0x66>
     f3e:	00 c0       	rjmp	.+0      	; 0xf40 <main+0x6c>
     f40:	00 00       	nop
{
	/* 等待接收数据*/
	if( (UCSR0A &0x80)==0x80)
	{
		RX_Data=UDR0;
		RX_Flag=1;
     f42:	dd 24       	eor	r13, r13
     f44:	d3 94       	inc	r13
}

void open_servo(void)//开启舵机输出
{if (!(TCCR1B==0x02))
   {   pp=0;
	   TCCR1B=0x02;
     f46:	32 e0       	ldi	r19, 0x02	; 2
     f48:	c3 2e       	mov	r12, r19
	
}
void USART_Receive( void )
{
	/* 等待接收数据*/
	if( (UCSR0A &0x80)==0x80)
     f4a:	80 91 c0 00 	lds	r24, 0x00C0
     f4e:	87 fd       	sbrc	r24, 7
     f50:	ac c0       	rjmp	.+344    	; 0x10aa <main+0x1d6>
	_delay_ms(10);
	
    while(1)
    { 
		USART_Receive();//读取串口数据
		Battery_voltage=adc_read(6)/102.40;
     f52:	86 e0       	ldi	r24, 0x06	; 6
     f54:	0e 94 4b 02 	call	0x496	; 0x496 <adc_read>
     f58:	bc 01       	movw	r22, r24
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 24 0a 	call	0x1448	; 0x1448 <__floatunsisf>
     f62:	2d ec       	ldi	r18, 0xCD	; 205
     f64:	3c ec       	ldi	r19, 0xCC	; 204
     f66:	4c ec       	ldi	r20, 0xCC	; 204
     f68:	52 e4       	ldi	r21, 0x42	; 66
     f6a:	0e 94 90 09 	call	0x1320	; 0x1320 <__divsf3>
     f6e:	60 93 40 07 	sts	0x0740, r22
     f72:	70 93 41 07 	sts	0x0741, r23
     f76:	80 93 42 07 	sts	0x0742, r24
     f7a:	90 93 43 07 	sts	0x0743, r25
		if (RX_Flag==1) //如果有新数据
     f7e:	80 91 39 07 	lds	r24, 0x0739
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	d9 f4       	brne	.+54     	; 0xfbc <main+0xe8>
		{   RX_Flag=0;
     f86:	10 92 39 07 	sts	0x0739, r1
			TX_Data=RX_Data;
     f8a:	90 91 3a 07 	lds	r25, 0x073A
     f8e:	90 93 38 07 	sts	0x0738, r25
			
			bb++;
     f92:	80 91 37 07 	lds	r24, 0x0737
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	80 93 37 07 	sts	0x0737, r24
     f9c:	ef e9       	ldi	r30, 0x9F	; 159
     f9e:	ff e0       	ldi	r31, 0x0F	; 15
     fa0:	31 97       	sbiw	r30, 0x01	; 1
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <main+0xcc>
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <main+0xd2>
     fa6:	00 00       	nop
void USART_Transmit( unsigned char data )
{
	_delay_ms(1);	//延时保证蓝牙有足够时间相应
	
	/* 等待发送缓冲器为空 */
	while ( !( UCSR0A & (1<<UDRE0)) );
     fa8:	80 91 c0 00 	lds	r24, 0x00C0
     fac:	85 ff       	sbrs	r24, 5
     fae:	fc cf       	rjmp	.-8      	; 0xfa8 <main+0xd4>
	/* 将数据放入缓冲器，发送数据 */
	UDR0 = data;
     fb0:	90 93 c6 00 	sts	0x00C6, r25
	while ( !( UCSR0A & (1<<TXC0)) );
     fb4:	80 91 c0 00 	lds	r24, 0x00C0
     fb8:	86 ff       	sbrs	r24, 6
     fba:	fc cf       	rjmp	.-8      	; 0xfb4 <main+0xe0>
		    USART_Transmit(TX_Data);	//发送串口数据
		}
		
	rest(RX_Data);
     fbc:	80 91 3a 07 	lds	r24, 0x073A
     fc0:	0e 94 ab 04 	call	0x956	; 0x956 <rest>
	if ((RX_Data==0x00)||(Battery_voltage<7.0))	
     fc4:	c0 91 3a 07 	lds	r28, 0x073A
     fc8:	d0 91 3b 07 	lds	r29, 0x073B
     fcc:	20 97       	sbiw	r28, 0x00	; 0
     fce:	09 f4       	brne	.+2      	; 0xfd2 <main+0xfe>
     fd0:	11 c1       	rjmp	.+546    	; 0x11f4 <main+0x320>
     fd2:	e0 90 40 07 	lds	r14, 0x0740
     fd6:	f0 90 41 07 	lds	r15, 0x0741
     fda:	00 91 42 07 	lds	r16, 0x0742
     fde:	10 91 43 07 	lds	r17, 0x0743
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 ee       	ldi	r20, 0xE0	; 224
     fe8:	50 e4       	ldi	r21, 0x40	; 64
     fea:	b7 01       	movw	r22, r14
     fec:	c8 01       	movw	r24, r16
     fee:	0e 94 8c 09 	call	0x1318	; 0x1318 <__cmpsf2>
     ff2:	87 fd       	sbrc	r24, 7
     ff4:	ff c0       	rjmp	.+510    	; 0x11f4 <main+0x320>
	{ off_servo();
	  if (Battery_voltage<7.0){DisplayChar_16X08(36,2,"~(zzz)~") ;}
	  else{DisplayChar_16X08(36,2,"~(@o@)~") ;	 }
	}
	
if ((Battery_voltage>8.0)&&(!(RX_Data==0x00)))
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	51 e4       	ldi	r21, 0x41	; 65
     ffe:	b7 01       	movw	r22, r14
    1000:	c8 01       	movw	r24, r16
    1002:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__gesf2>
    1006:	18 16       	cp	r1, r24
    1008:	0c f0       	brlt	.+2      	; 0x100c <main+0x138>
    100a:	59 c0       	rjmp	.+178    	; 0x10be <main+0x1ea>
	{DisplayChar_16X08(36,2,"~(^o^)~") ;	 
    100c:	42 e2       	ldi	r20, 0x22	; 34
    100e:	57 e0       	ldi	r21, 0x07	; 7
    1010:	62 e0       	ldi	r22, 0x02	; 2
    1012:	84 e2       	ldi	r24, 0x24	; 36
    1014:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DisplayChar_16X08>
    1018:	c0 91 3a 07 	lds	r28, 0x073A
    101c:	d0 91 3b 07 	lds	r29, 0x073B
else if ((Battery_voltage>7.0)&&(!(RX_Data==0x00)))
{DisplayChar_16X08(36,2,"~(=o=)~") ;	
}
		
			
	if (RX_Data==0x01)//站立
    1020:	c1 30       	cpi	r28, 0x01	; 1
    1022:	d1 05       	cpc	r29, r1
    1024:	09 f4       	brne	.+2      	; 0x1028 <main+0x154>
    1026:	27 c1       	rjmp	.+590    	; 0x1276 <main+0x3a2>
	{ open_servo();
	  robot_stand(0,-90);
	}
	if (RX_Data==0x02)//左转
    1028:	c2 30       	cpi	r28, 0x02	; 2
    102a:	d1 05       	cpc	r29, r1
    102c:	09 f4       	brne	.+2      	; 0x1030 <main+0x15c>
    102e:	3b c1       	rjmp	.+630    	; 0x12a6 <main+0x3d2>
	{robot_move(0,0,40,-90,90,100);}
	if (RX_Data==0x03)//右转
    1030:	c3 30       	cpi	r28, 0x03	; 3
    1032:	d1 05       	cpc	r29, r1
    1034:	09 f4       	brne	.+2      	; 0x1038 <main+0x164>
    1036:	4e c1       	rjmp	.+668    	; 0x12d4 <main+0x400>
	{ robot_move(0,0,-40,-90,90,100);}	
	if (RX_Data==0x04)//前进
    1038:	c4 30       	cpi	r28, 0x04	; 4
    103a:	d1 05       	cpc	r29, r1
    103c:	09 f4       	brne	.+2      	; 0x1040 <main+0x16c>
    103e:	53 c0       	rjmp	.+166    	; 0x10e6 <main+0x212>
	{ robot_move(0,40,0,-90,90,100);}	
    if (RX_Data==0x05)//后退
    1040:	c5 30       	cpi	r28, 0x05	; 5
    1042:	d1 05       	cpc	r29, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <main+0x174>
    1046:	66 c0       	rjmp	.+204    	; 0x1114 <main+0x240>
	{robot_move(0,-40,0,-90,90,100);}
	 if (RX_Data==0x06)//
    1048:	c6 30       	cpi	r28, 0x06	; 6
    104a:	d1 05       	cpc	r29, r1
    104c:	09 f4       	brne	.+2      	; 0x1050 <main+0x17c>
    104e:	79 c0       	rjmp	.+242    	; 0x1142 <main+0x26e>
	 {robot_Sur_Place(1,-90,90,100);}
	 if (RX_Data==0x07)//
    1050:	c7 30       	cpi	r28, 0x07	; 7
    1052:	d1 05       	cpc	r29, r1
    1054:	09 f4       	brne	.+2      	; 0x1058 <main+0x184>
    1056:	8c c0       	rjmp	.+280    	; 0x1170 <main+0x29c>
	 {robot_move(40,0,0,-90,90,100);}
	 if (RX_Data==0x08)//
    1058:	c8 30       	cpi	r28, 0x08	; 8
    105a:	d1 05       	cpc	r29, r1
    105c:	09 f4       	brne	.+2      	; 0x1060 <main+0x18c>
    105e:	9f c0       	rjmp	.+318    	; 0x119e <main+0x2ca>
	 {robot_move(40,0,0,-90,90,100);}
	 if (RX_Data==0x09)//
    1060:	c9 30       	cpi	r28, 0x09	; 9
    1062:	d1 05       	cpc	r29, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <main+0x194>
    1066:	b2 c0       	rjmp	.+356    	; 0x11cc <main+0x2f8>
	 {robot_move(20,20,0,-90,90,100);}
		
		
		//DisplayChar_16X08(36,2,"~(@o@)~") ;	 	 
	
     Cache_MDigit5(RX_Data,6,0,1 );Cache_MDigit5(Battery_voltage*100,6,88,1 );
    1068:	21 e0       	ldi	r18, 0x01	; 1
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	66 e0       	ldi	r22, 0x06	; 6
    106e:	ce 01       	movw	r24, r28
    1070:	0e 94 3d 01 	call	0x27a	; 0x27a <Cache_MDigit5>
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	48 ec       	ldi	r20, 0xC8	; 200
    107a:	52 e4       	ldi	r21, 0x42	; 66
    107c:	60 91 40 07 	lds	r22, 0x0740
    1080:	70 91 41 07 	lds	r23, 0x0741
    1084:	80 91 42 07 	lds	r24, 0x0742
    1088:	90 91 43 07 	lds	r25, 0x0743
    108c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__mulsf3>
    1090:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fixunssfsi>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	21 e0       	ldi	r18, 0x01	; 1
    109a:	48 e5       	ldi	r20, 0x58	; 88
    109c:	66 e0       	ldi	r22, 0x06	; 6
    109e:	0e 94 3d 01 	call	0x27a	; 0x27a <Cache_MDigit5>
	
}
void USART_Receive( void )
{
	/* 等待接收数据*/
	if( (UCSR0A &0x80)==0x80)
    10a2:	80 91 c0 00 	lds	r24, 0x00C0
    10a6:	87 ff       	sbrs	r24, 7
    10a8:	54 cf       	rjmp	.-344    	; 0xf52 <main+0x7e>
	{
		RX_Data=UDR0;
    10aa:	80 91 c6 00 	lds	r24, 0x00C6
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	90 93 3b 07 	sts	0x073B, r25
    10b4:	80 93 3a 07 	sts	0x073A, r24
		RX_Flag=1;
    10b8:	d0 92 39 07 	sts	0x0739, r13
    10bc:	4a cf       	rjmp	.-364    	; 0xf52 <main+0x7e>
	}
	
if ((Battery_voltage>8.0)&&(!(RX_Data==0x00)))
	{DisplayChar_16X08(36,2,"~(^o^)~") ;	 
	}
else if ((Battery_voltage>7.0)&&(!(RX_Data==0x00)))
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 ee       	ldi	r20, 0xE0	; 224
    10c4:	50 e4       	ldi	r21, 0x40	; 64
    10c6:	b7 01       	movw	r22, r14
    10c8:	c8 01       	movw	r24, r16
    10ca:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__gesf2>
    10ce:	18 16       	cp	r1, r24
    10d0:	0c f0       	brlt	.+2      	; 0x10d4 <main+0x200>
    10d2:	a6 cf       	rjmp	.-180    	; 0x1020 <main+0x14c>
    10d4:	cd 2b       	or	r28, r29
    10d6:	09 f0       	breq	.+2      	; 0x10da <main+0x206>
    10d8:	14 c1       	rjmp	.+552    	; 0x1302 <main+0x42e>
	{ off_servo();
	  if (Battery_voltage<7.0){DisplayChar_16X08(36,2,"~(zzz)~") ;}
	  else{DisplayChar_16X08(36,2,"~(@o@)~") ;	 }
	}
	
if ((Battery_voltage>8.0)&&(!(RX_Data==0x00)))
    10da:	c0 e0       	ldi	r28, 0x00	; 0
    10dc:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if (RX_Data==0x02)//左转
	{robot_move(0,0,40,-90,90,100);}
	if (RX_Data==0x03)//右转
	{ robot_move(0,0,-40,-90,90,100);}	
	if (RX_Data==0x04)//前进
    10de:	c4 30       	cpi	r28, 0x04	; 4
    10e0:	d1 05       	cpc	r29, r1
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <main+0x212>
    10e4:	ad cf       	rjmp	.-166    	; 0x1040 <main+0x16c>
	{ robot_move(0,40,0,-90,90,100);}	
    10e6:	84 e6       	ldi	r24, 0x64	; 100
    10e8:	e8 2e       	mov	r14, r24
    10ea:	f1 2c       	mov	r15, r1
    10ec:	0a e5       	ldi	r16, 0x5A	; 90
    10ee:	10 e0       	ldi	r17, 0x00	; 0
    10f0:	26 ea       	ldi	r18, 0xA6	; 166
    10f2:	3f ef       	ldi	r19, 0xFF	; 255
    10f4:	40 e0       	ldi	r20, 0x00	; 0
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	68 e2       	ldi	r22, 0x28	; 40
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 bf 04 	call	0x97e	; 0x97e <robot_move>
    1104:	c0 91 3a 07 	lds	r28, 0x073A
    1108:	d0 91 3b 07 	lds	r29, 0x073B
    if (RX_Data==0x05)//后退
    110c:	c5 30       	cpi	r28, 0x05	; 5
    110e:	d1 05       	cpc	r29, r1
    1110:	09 f0       	breq	.+2      	; 0x1114 <main+0x240>
    1112:	9a cf       	rjmp	.-204    	; 0x1048 <main+0x174>
	{robot_move(0,-40,0,-90,90,100);}
    1114:	04 e6       	ldi	r16, 0x64	; 100
    1116:	e0 2e       	mov	r14, r16
    1118:	f1 2c       	mov	r15, r1
    111a:	0a e5       	ldi	r16, 0x5A	; 90
    111c:	10 e0       	ldi	r17, 0x00	; 0
    111e:	26 ea       	ldi	r18, 0xA6	; 166
    1120:	3f ef       	ldi	r19, 0xFF	; 255
    1122:	40 e0       	ldi	r20, 0x00	; 0
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	68 ed       	ldi	r22, 0xD8	; 216
    1128:	7f ef       	ldi	r23, 0xFF	; 255
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 bf 04 	call	0x97e	; 0x97e <robot_move>
    1132:	c0 91 3a 07 	lds	r28, 0x073A
    1136:	d0 91 3b 07 	lds	r29, 0x073B
	 if (RX_Data==0x06)//
    113a:	c6 30       	cpi	r28, 0x06	; 6
    113c:	d1 05       	cpc	r29, r1
    113e:	09 f0       	breq	.+2      	; 0x1142 <main+0x26e>
    1140:	87 cf       	rjmp	.-242    	; 0x1050 <main+0x17c>
	    con2=con1;
	 }
 }
 void robot_Sur_Place(char foot,int Foot_height_down,int Foot_height_up,unsigned int step_time)
 {
	robot_move( 0,0,0,Foot_height_down, Foot_height_up,step_time);
    1142:	14 e6       	ldi	r17, 0x64	; 100
    1144:	e1 2e       	mov	r14, r17
    1146:	f1 2c       	mov	r15, r1
    1148:	0a e5       	ldi	r16, 0x5A	; 90
    114a:	10 e0       	ldi	r17, 0x00	; 0
    114c:	26 ea       	ldi	r18, 0xA6	; 166
    114e:	3f ef       	ldi	r19, 0xFF	; 255
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 bf 04 	call	0x97e	; 0x97e <robot_move>
    1160:	c0 91 3a 07 	lds	r28, 0x073A
    1164:	d0 91 3b 07 	lds	r29, 0x073B
	 {robot_Sur_Place(1,-90,90,100);}
	 if (RX_Data==0x07)//
    1168:	c7 30       	cpi	r28, 0x07	; 7
    116a:	d1 05       	cpc	r29, r1
    116c:	09 f0       	breq	.+2      	; 0x1170 <main+0x29c>
    116e:	74 cf       	rjmp	.-280    	; 0x1058 <main+0x184>
	 {robot_move(40,0,0,-90,90,100);}
    1170:	d4 e6       	ldi	r29, 0x64	; 100
    1172:	ed 2e       	mov	r14, r29
    1174:	f1 2c       	mov	r15, r1
    1176:	0a e5       	ldi	r16, 0x5A	; 90
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	26 ea       	ldi	r18, 0xA6	; 166
    117c:	3f ef       	ldi	r19, 0xFF	; 255
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	88 e2       	ldi	r24, 0x28	; 40
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 94 bf 04 	call	0x97e	; 0x97e <robot_move>
    118e:	c0 91 3a 07 	lds	r28, 0x073A
    1192:	d0 91 3b 07 	lds	r29, 0x073B
	 if (RX_Data==0x08)//
    1196:	c8 30       	cpi	r28, 0x08	; 8
    1198:	d1 05       	cpc	r29, r1
    119a:	09 f0       	breq	.+2      	; 0x119e <main+0x2ca>
    119c:	61 cf       	rjmp	.-318    	; 0x1060 <main+0x18c>
	 {robot_move(40,0,0,-90,90,100);}
    119e:	c4 e6       	ldi	r28, 0x64	; 100
    11a0:	ec 2e       	mov	r14, r28
    11a2:	f1 2c       	mov	r15, r1
    11a4:	0a e5       	ldi	r16, 0x5A	; 90
    11a6:	10 e0       	ldi	r17, 0x00	; 0
    11a8:	26 ea       	ldi	r18, 0xA6	; 166
    11aa:	3f ef       	ldi	r19, 0xFF	; 255
    11ac:	40 e0       	ldi	r20, 0x00	; 0
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	88 e2       	ldi	r24, 0x28	; 40
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	0e 94 bf 04 	call	0x97e	; 0x97e <robot_move>
    11bc:	c0 91 3a 07 	lds	r28, 0x073A
    11c0:	d0 91 3b 07 	lds	r29, 0x073B
	 if (RX_Data==0x09)//
    11c4:	c9 30       	cpi	r28, 0x09	; 9
    11c6:	d1 05       	cpc	r29, r1
    11c8:	09 f0       	breq	.+2      	; 0x11cc <main+0x2f8>
    11ca:	4e cf       	rjmp	.-356    	; 0x1068 <main+0x194>
	 {robot_move(20,20,0,-90,90,100);}
    11cc:	b4 e6       	ldi	r27, 0x64	; 100
    11ce:	eb 2e       	mov	r14, r27
    11d0:	f1 2c       	mov	r15, r1
    11d2:	0a e5       	ldi	r16, 0x5A	; 90
    11d4:	10 e0       	ldi	r17, 0x00	; 0
    11d6:	26 ea       	ldi	r18, 0xA6	; 166
    11d8:	3f ef       	ldi	r19, 0xFF	; 255
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	64 e1       	ldi	r22, 0x14	; 20
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	84 e1       	ldi	r24, 0x14	; 20
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 bf 04 	call	0x97e	; 0x97e <robot_move>
    11ea:	c0 91 3a 07 	lds	r28, 0x073A
    11ee:	d0 91 3b 07 	lds	r29, 0x073B
    11f2:	3a cf       	rjmp	.-396    	; 0x1068 <main+0x194>
		    USART_Transmit(TX_Data);	//发送串口数据
		}
		
	rest(RX_Data);
	if ((RX_Data==0x00)||(Battery_voltage<7.0))	
	{ off_servo();
    11f4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <off_servo>
	  if (Battery_voltage<7.0){DisplayChar_16X08(36,2,"~(zzz)~") ;}
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 ee       	ldi	r20, 0xE0	; 224
    11fe:	50 e4       	ldi	r21, 0x40	; 64
    1200:	60 91 40 07 	lds	r22, 0x0740
    1204:	70 91 41 07 	lds	r23, 0x0741
    1208:	80 91 42 07 	lds	r24, 0x0742
    120c:	90 91 43 07 	lds	r25, 0x0743
    1210:	0e 94 8c 09 	call	0x1318	; 0x1318 <__cmpsf2>
    1214:	87 ff       	sbrs	r24, 7
    1216:	72 c0       	rjmp	.+228    	; 0x12fc <main+0x428>
    1218:	42 e1       	ldi	r20, 0x12	; 18
    121a:	57 e0       	ldi	r21, 0x07	; 7
	  else{DisplayChar_16X08(36,2,"~(@o@)~") ;	 }
    121c:	62 e0       	ldi	r22, 0x02	; 2
    121e:	84 e2       	ldi	r24, 0x24	; 36
    1220:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DisplayChar_16X08>
    1224:	e0 90 40 07 	lds	r14, 0x0740
    1228:	f0 90 41 07 	lds	r15, 0x0741
    122c:	00 91 42 07 	lds	r16, 0x0742
    1230:	10 91 43 07 	lds	r17, 0x0743
    1234:	c0 91 3a 07 	lds	r28, 0x073A
    1238:	d0 91 3b 07 	lds	r29, 0x073B
	}
	
if ((Battery_voltage>8.0)&&(!(RX_Data==0x00)))
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	51 e4       	ldi	r21, 0x41	; 65
    1244:	b7 01       	movw	r22, r14
    1246:	c8 01       	movw	r24, r16
    1248:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__gesf2>
    124c:	18 16       	cp	r1, r24
    124e:	0c f0       	brlt	.+2      	; 0x1252 <main+0x37e>
    1250:	36 cf       	rjmp	.-404    	; 0x10be <main+0x1ea>
    1252:	20 97       	sbiw	r28, 0x00	; 0
    1254:	09 f0       	breq	.+2      	; 0x1258 <main+0x384>
    1256:	da ce       	rjmp	.-588    	; 0x100c <main+0x138>
	{DisplayChar_16X08(36,2,"~(^o^)~") ;	 
	}
else if ((Battery_voltage>7.0)&&(!(RX_Data==0x00)))
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 ee       	ldi	r20, 0xE0	; 224
    125e:	50 e4       	ldi	r21, 0x40	; 64
    1260:	b7 01       	movw	r22, r14
    1262:	c8 01       	movw	r24, r16
    1264:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__gesf2>
    1268:	18 16       	cp	r1, r24
    126a:	0c f4       	brge	.+2      	; 0x126e <main+0x39a>
    126c:	36 cf       	rjmp	.-404    	; 0x10da <main+0x206>
{DisplayChar_16X08(36,2,"~(=o=)~") ;	
}
		
			
	if (RX_Data==0x01)//站立
    126e:	c1 30       	cpi	r28, 0x01	; 1
    1270:	d1 05       	cpc	r29, r1
    1272:	09 f0       	breq	.+2      	; 0x1276 <main+0x3a2>
    1274:	d9 ce       	rjmp	.-590    	; 0x1028 <main+0x154>
    servo_05_l;servo_06_l;servo_07_l;servo_08_l;
	pp=18;
}

void open_servo(void)//开启舵机输出
{if (!(TCCR1B==0x02))
    1276:	80 91 81 00 	lds	r24, 0x0081
    127a:	82 30       	cpi	r24, 0x02	; 2
    127c:	31 f0       	breq	.+12     	; 0x128a <main+0x3b6>
   {   pp=0;
    127e:	10 92 3f 07 	sts	0x073F, r1
    1282:	10 92 3e 07 	sts	0x073E, r1
	   TCCR1B=0x02;
    1286:	c0 92 81 00 	sts	0x0081, r12
	{ open_servo();
	  robot_stand(0,-90);
    128a:	66 ea       	ldi	r22, 0xA6	; 166
    128c:	7f ef       	ldi	r23, 0xFF	; 255
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <robot_stand>
    1296:	c0 91 3a 07 	lds	r28, 0x073A
    129a:	d0 91 3b 07 	lds	r29, 0x073B
	}
	if (RX_Data==0x02)//左转
    129e:	c2 30       	cpi	r28, 0x02	; 2
    12a0:	d1 05       	cpc	r29, r1
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <main+0x3d2>
    12a4:	c5 ce       	rjmp	.-630    	; 0x1030 <main+0x15c>
	{robot_move(0,0,40,-90,90,100);}
    12a6:	24 e6       	ldi	r18, 0x64	; 100
    12a8:	e2 2e       	mov	r14, r18
    12aa:	f1 2c       	mov	r15, r1
    12ac:	0a e5       	ldi	r16, 0x5A	; 90
    12ae:	10 e0       	ldi	r17, 0x00	; 0
    12b0:	26 ea       	ldi	r18, 0xA6	; 166
    12b2:	3f ef       	ldi	r19, 0xFF	; 255
    12b4:	48 e2       	ldi	r20, 0x28	; 40
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 94 bf 04 	call	0x97e	; 0x97e <robot_move>
    12c4:	c0 91 3a 07 	lds	r28, 0x073A
    12c8:	d0 91 3b 07 	lds	r29, 0x073B
	if (RX_Data==0x03)//右转
    12cc:	c3 30       	cpi	r28, 0x03	; 3
    12ce:	d1 05       	cpc	r29, r1
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <main+0x400>
    12d2:	b2 ce       	rjmp	.-668    	; 0x1038 <main+0x164>
	{ robot_move(0,0,-40,-90,90,100);}	
    12d4:	94 e6       	ldi	r25, 0x64	; 100
    12d6:	e9 2e       	mov	r14, r25
    12d8:	f1 2c       	mov	r15, r1
    12da:	0a e5       	ldi	r16, 0x5A	; 90
    12dc:	10 e0       	ldi	r17, 0x00	; 0
    12de:	26 ea       	ldi	r18, 0xA6	; 166
    12e0:	3f ef       	ldi	r19, 0xFF	; 255
    12e2:	48 ed       	ldi	r20, 0xD8	; 216
    12e4:	5f ef       	ldi	r21, 0xFF	; 255
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 bf 04 	call	0x97e	; 0x97e <robot_move>
    12f2:	c0 91 3a 07 	lds	r28, 0x073A
    12f6:	d0 91 3b 07 	lds	r29, 0x073B
    12fa:	9e ce       	rjmp	.-708    	; 0x1038 <main+0x164>
		
	rest(RX_Data);
	if ((RX_Data==0x00)||(Battery_voltage<7.0))	
	{ off_servo();
	  if (Battery_voltage<7.0){DisplayChar_16X08(36,2,"~(zzz)~") ;}
	  else{DisplayChar_16X08(36,2,"~(@o@)~") ;	 }
    12fc:	4a e1       	ldi	r20, 0x1A	; 26
    12fe:	57 e0       	ldi	r21, 0x07	; 7
    1300:	8d cf       	rjmp	.-230    	; 0x121c <main+0x348>
	
if ((Battery_voltage>8.0)&&(!(RX_Data==0x00)))
	{DisplayChar_16X08(36,2,"~(^o^)~") ;	 
	}
else if ((Battery_voltage>7.0)&&(!(RX_Data==0x00)))
{DisplayChar_16X08(36,2,"~(=o=)~") ;	
    1302:	4a e2       	ldi	r20, 0x2A	; 42
    1304:	57 e0       	ldi	r21, 0x07	; 7
    1306:	62 e0       	ldi	r22, 0x02	; 2
    1308:	84 e2       	ldi	r24, 0x24	; 36
    130a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DisplayChar_16X08>
    130e:	c0 91 3a 07 	lds	r28, 0x073A
    1312:	d0 91 3b 07 	lds	r29, 0x073B
    1316:	84 ce       	rjmp	.-760    	; 0x1020 <main+0x14c>

00001318 <__cmpsf2>:
    1318:	d4 d0       	rcall	.+424    	; 0x14c2 <__fp_cmp>
    131a:	08 f4       	brcc	.+2      	; 0x131e <__cmpsf2+0x6>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	08 95       	ret

00001320 <__divsf3>:
    1320:	0c d0       	rcall	.+24     	; 0x133a <__divsf3x>
    1322:	0a c1       	rjmp	.+532    	; 0x1538 <__fp_round>
    1324:	02 d1       	rcall	.+516    	; 0x152a <__fp_pscB>
    1326:	40 f0       	brcs	.+16     	; 0x1338 <__divsf3+0x18>
    1328:	f9 d0       	rcall	.+498    	; 0x151c <__fp_pscA>
    132a:	30 f0       	brcs	.+12     	; 0x1338 <__divsf3+0x18>
    132c:	21 f4       	brne	.+8      	; 0x1336 <__divsf3+0x16>
    132e:	5f 3f       	cpi	r21, 0xFF	; 255
    1330:	19 f0       	breq	.+6      	; 0x1338 <__divsf3+0x18>
    1332:	eb c0       	rjmp	.+470    	; 0x150a <__fp_inf>
    1334:	51 11       	cpse	r21, r1
    1336:	34 c1       	rjmp	.+616    	; 0x15a0 <__fp_szero>
    1338:	ee c0       	rjmp	.+476    	; 0x1516 <__fp_nan>

0000133a <__divsf3x>:
    133a:	0f d1       	rcall	.+542    	; 0x155a <__fp_split3>
    133c:	98 f3       	brcs	.-26     	; 0x1324 <__divsf3+0x4>

0000133e <__divsf3_pse>:
    133e:	99 23       	and	r25, r25
    1340:	c9 f3       	breq	.-14     	; 0x1334 <__divsf3+0x14>
    1342:	55 23       	and	r21, r21
    1344:	b1 f3       	breq	.-20     	; 0x1332 <__divsf3+0x12>
    1346:	95 1b       	sub	r25, r21
    1348:	55 0b       	sbc	r21, r21
    134a:	bb 27       	eor	r27, r27
    134c:	aa 27       	eor	r26, r26
    134e:	62 17       	cp	r22, r18
    1350:	73 07       	cpc	r23, r19
    1352:	84 07       	cpc	r24, r20
    1354:	38 f0       	brcs	.+14     	; 0x1364 <__divsf3_pse+0x26>
    1356:	9f 5f       	subi	r25, 0xFF	; 255
    1358:	5f 4f       	sbci	r21, 0xFF	; 255
    135a:	22 0f       	add	r18, r18
    135c:	33 1f       	adc	r19, r19
    135e:	44 1f       	adc	r20, r20
    1360:	aa 1f       	adc	r26, r26
    1362:	a9 f3       	breq	.-22     	; 0x134e <__divsf3_pse+0x10>
    1364:	33 d0       	rcall	.+102    	; 0x13cc <__divsf3_pse+0x8e>
    1366:	0e 2e       	mov	r0, r30
    1368:	3a f0       	brmi	.+14     	; 0x1378 <__divsf3_pse+0x3a>
    136a:	e0 e8       	ldi	r30, 0x80	; 128
    136c:	30 d0       	rcall	.+96     	; 0x13ce <__divsf3_pse+0x90>
    136e:	91 50       	subi	r25, 0x01	; 1
    1370:	50 40       	sbci	r21, 0x00	; 0
    1372:	e6 95       	lsr	r30
    1374:	00 1c       	adc	r0, r0
    1376:	ca f7       	brpl	.-14     	; 0x136a <__divsf3_pse+0x2c>
    1378:	29 d0       	rcall	.+82     	; 0x13cc <__divsf3_pse+0x8e>
    137a:	fe 2f       	mov	r31, r30
    137c:	27 d0       	rcall	.+78     	; 0x13cc <__divsf3_pse+0x8e>
    137e:	66 0f       	add	r22, r22
    1380:	77 1f       	adc	r23, r23
    1382:	88 1f       	adc	r24, r24
    1384:	bb 1f       	adc	r27, r27
    1386:	26 17       	cp	r18, r22
    1388:	37 07       	cpc	r19, r23
    138a:	48 07       	cpc	r20, r24
    138c:	ab 07       	cpc	r26, r27
    138e:	b0 e8       	ldi	r27, 0x80	; 128
    1390:	09 f0       	breq	.+2      	; 0x1394 <__divsf3_pse+0x56>
    1392:	bb 0b       	sbc	r27, r27
    1394:	80 2d       	mov	r24, r0
    1396:	bf 01       	movw	r22, r30
    1398:	ff 27       	eor	r31, r31
    139a:	93 58       	subi	r25, 0x83	; 131
    139c:	5f 4f       	sbci	r21, 0xFF	; 255
    139e:	2a f0       	brmi	.+10     	; 0x13aa <__divsf3_pse+0x6c>
    13a0:	9e 3f       	cpi	r25, 0xFE	; 254
    13a2:	51 05       	cpc	r21, r1
    13a4:	68 f0       	brcs	.+26     	; 0x13c0 <__divsf3_pse+0x82>
    13a6:	b1 c0       	rjmp	.+354    	; 0x150a <__fp_inf>
    13a8:	fb c0       	rjmp	.+502    	; 0x15a0 <__fp_szero>
    13aa:	5f 3f       	cpi	r21, 0xFF	; 255
    13ac:	ec f3       	brlt	.-6      	; 0x13a8 <__divsf3_pse+0x6a>
    13ae:	98 3e       	cpi	r25, 0xE8	; 232
    13b0:	dc f3       	brlt	.-10     	; 0x13a8 <__divsf3_pse+0x6a>
    13b2:	86 95       	lsr	r24
    13b4:	77 95       	ror	r23
    13b6:	67 95       	ror	r22
    13b8:	b7 95       	ror	r27
    13ba:	f7 95       	ror	r31
    13bc:	9f 5f       	subi	r25, 0xFF	; 255
    13be:	c9 f7       	brne	.-14     	; 0x13b2 <__divsf3_pse+0x74>
    13c0:	88 0f       	add	r24, r24
    13c2:	91 1d       	adc	r25, r1
    13c4:	96 95       	lsr	r25
    13c6:	87 95       	ror	r24
    13c8:	97 f9       	bld	r25, 7
    13ca:	08 95       	ret
    13cc:	e1 e0       	ldi	r30, 0x01	; 1
    13ce:	66 0f       	add	r22, r22
    13d0:	77 1f       	adc	r23, r23
    13d2:	88 1f       	adc	r24, r24
    13d4:	bb 1f       	adc	r27, r27
    13d6:	62 17       	cp	r22, r18
    13d8:	73 07       	cpc	r23, r19
    13da:	84 07       	cpc	r24, r20
    13dc:	ba 07       	cpc	r27, r26
    13de:	20 f0       	brcs	.+8      	; 0x13e8 <__divsf3_pse+0xaa>
    13e0:	62 1b       	sub	r22, r18
    13e2:	73 0b       	sbc	r23, r19
    13e4:	84 0b       	sbc	r24, r20
    13e6:	ba 0b       	sbc	r27, r26
    13e8:	ee 1f       	adc	r30, r30
    13ea:	88 f7       	brcc	.-30     	; 0x13ce <__divsf3_pse+0x90>
    13ec:	e0 95       	com	r30
    13ee:	08 95       	ret

000013f0 <__fixunssfsi>:
    13f0:	bc d0       	rcall	.+376    	; 0x156a <__fp_splitA>
    13f2:	88 f0       	brcs	.+34     	; 0x1416 <__fixunssfsi+0x26>
    13f4:	9f 57       	subi	r25, 0x7F	; 127
    13f6:	90 f0       	brcs	.+36     	; 0x141c <__fixunssfsi+0x2c>
    13f8:	b9 2f       	mov	r27, r25
    13fa:	99 27       	eor	r25, r25
    13fc:	b7 51       	subi	r27, 0x17	; 23
    13fe:	a0 f0       	brcs	.+40     	; 0x1428 <__fixunssfsi+0x38>
    1400:	d1 f0       	breq	.+52     	; 0x1436 <__fixunssfsi+0x46>
    1402:	66 0f       	add	r22, r22
    1404:	77 1f       	adc	r23, r23
    1406:	88 1f       	adc	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	1a f0       	brmi	.+6      	; 0x1412 <__fixunssfsi+0x22>
    140c:	ba 95       	dec	r27
    140e:	c9 f7       	brne	.-14     	; 0x1402 <__fixunssfsi+0x12>
    1410:	12 c0       	rjmp	.+36     	; 0x1436 <__fixunssfsi+0x46>
    1412:	b1 30       	cpi	r27, 0x01	; 1
    1414:	81 f0       	breq	.+32     	; 0x1436 <__fixunssfsi+0x46>
    1416:	c3 d0       	rcall	.+390    	; 0x159e <__fp_zero>
    1418:	b1 e0       	ldi	r27, 0x01	; 1
    141a:	08 95       	ret
    141c:	c0 c0       	rjmp	.+384    	; 0x159e <__fp_zero>
    141e:	67 2f       	mov	r22, r23
    1420:	78 2f       	mov	r23, r24
    1422:	88 27       	eor	r24, r24
    1424:	b8 5f       	subi	r27, 0xF8	; 248
    1426:	39 f0       	breq	.+14     	; 0x1436 <__fixunssfsi+0x46>
    1428:	b9 3f       	cpi	r27, 0xF9	; 249
    142a:	cc f3       	brlt	.-14     	; 0x141e <__fixunssfsi+0x2e>
    142c:	86 95       	lsr	r24
    142e:	77 95       	ror	r23
    1430:	67 95       	ror	r22
    1432:	b3 95       	inc	r27
    1434:	d9 f7       	brne	.-10     	; 0x142c <__fixunssfsi+0x3c>
    1436:	3e f4       	brtc	.+14     	; 0x1446 <__fixunssfsi+0x56>
    1438:	90 95       	com	r25
    143a:	80 95       	com	r24
    143c:	70 95       	com	r23
    143e:	61 95       	neg	r22
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	8f 4f       	sbci	r24, 0xFF	; 255
    1444:	9f 4f       	sbci	r25, 0xFF	; 255
    1446:	08 95       	ret

00001448 <__floatunsisf>:
    1448:	e8 94       	clt
    144a:	09 c0       	rjmp	.+18     	; 0x145e <__floatsisf+0x12>

0000144c <__floatsisf>:
    144c:	97 fb       	bst	r25, 7
    144e:	3e f4       	brtc	.+14     	; 0x145e <__floatsisf+0x12>
    1450:	90 95       	com	r25
    1452:	80 95       	com	r24
    1454:	70 95       	com	r23
    1456:	61 95       	neg	r22
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	8f 4f       	sbci	r24, 0xFF	; 255
    145c:	9f 4f       	sbci	r25, 0xFF	; 255
    145e:	99 23       	and	r25, r25
    1460:	a9 f0       	breq	.+42     	; 0x148c <__floatsisf+0x40>
    1462:	f9 2f       	mov	r31, r25
    1464:	96 e9       	ldi	r25, 0x96	; 150
    1466:	bb 27       	eor	r27, r27
    1468:	93 95       	inc	r25
    146a:	f6 95       	lsr	r31
    146c:	87 95       	ror	r24
    146e:	77 95       	ror	r23
    1470:	67 95       	ror	r22
    1472:	b7 95       	ror	r27
    1474:	f1 11       	cpse	r31, r1
    1476:	f8 cf       	rjmp	.-16     	; 0x1468 <__floatsisf+0x1c>
    1478:	fa f4       	brpl	.+62     	; 0x14b8 <__floatsisf+0x6c>
    147a:	bb 0f       	add	r27, r27
    147c:	11 f4       	brne	.+4      	; 0x1482 <__floatsisf+0x36>
    147e:	60 ff       	sbrs	r22, 0
    1480:	1b c0       	rjmp	.+54     	; 0x14b8 <__floatsisf+0x6c>
    1482:	6f 5f       	subi	r22, 0xFF	; 255
    1484:	7f 4f       	sbci	r23, 0xFF	; 255
    1486:	8f 4f       	sbci	r24, 0xFF	; 255
    1488:	9f 4f       	sbci	r25, 0xFF	; 255
    148a:	16 c0       	rjmp	.+44     	; 0x14b8 <__floatsisf+0x6c>
    148c:	88 23       	and	r24, r24
    148e:	11 f0       	breq	.+4      	; 0x1494 <__floatsisf+0x48>
    1490:	96 e9       	ldi	r25, 0x96	; 150
    1492:	11 c0       	rjmp	.+34     	; 0x14b6 <__floatsisf+0x6a>
    1494:	77 23       	and	r23, r23
    1496:	21 f0       	breq	.+8      	; 0x14a0 <__floatsisf+0x54>
    1498:	9e e8       	ldi	r25, 0x8E	; 142
    149a:	87 2f       	mov	r24, r23
    149c:	76 2f       	mov	r23, r22
    149e:	05 c0       	rjmp	.+10     	; 0x14aa <__floatsisf+0x5e>
    14a0:	66 23       	and	r22, r22
    14a2:	71 f0       	breq	.+28     	; 0x14c0 <__floatsisf+0x74>
    14a4:	96 e8       	ldi	r25, 0x86	; 134
    14a6:	86 2f       	mov	r24, r22
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	2a f0       	brmi	.+10     	; 0x14b8 <__floatsisf+0x6c>
    14ae:	9a 95       	dec	r25
    14b0:	66 0f       	add	r22, r22
    14b2:	77 1f       	adc	r23, r23
    14b4:	88 1f       	adc	r24, r24
    14b6:	da f7       	brpl	.-10     	; 0x14ae <__floatsisf+0x62>
    14b8:	88 0f       	add	r24, r24
    14ba:	96 95       	lsr	r25
    14bc:	87 95       	ror	r24
    14be:	97 f9       	bld	r25, 7
    14c0:	08 95       	ret

000014c2 <__fp_cmp>:
    14c2:	99 0f       	add	r25, r25
    14c4:	00 08       	sbc	r0, r0
    14c6:	55 0f       	add	r21, r21
    14c8:	aa 0b       	sbc	r26, r26
    14ca:	e0 e8       	ldi	r30, 0x80	; 128
    14cc:	fe ef       	ldi	r31, 0xFE	; 254
    14ce:	16 16       	cp	r1, r22
    14d0:	17 06       	cpc	r1, r23
    14d2:	e8 07       	cpc	r30, r24
    14d4:	f9 07       	cpc	r31, r25
    14d6:	c0 f0       	brcs	.+48     	; 0x1508 <__fp_cmp+0x46>
    14d8:	12 16       	cp	r1, r18
    14da:	13 06       	cpc	r1, r19
    14dc:	e4 07       	cpc	r30, r20
    14de:	f5 07       	cpc	r31, r21
    14e0:	98 f0       	brcs	.+38     	; 0x1508 <__fp_cmp+0x46>
    14e2:	62 1b       	sub	r22, r18
    14e4:	73 0b       	sbc	r23, r19
    14e6:	84 0b       	sbc	r24, r20
    14e8:	95 0b       	sbc	r25, r21
    14ea:	39 f4       	brne	.+14     	; 0x14fa <__fp_cmp+0x38>
    14ec:	0a 26       	eor	r0, r26
    14ee:	61 f0       	breq	.+24     	; 0x1508 <__fp_cmp+0x46>
    14f0:	23 2b       	or	r18, r19
    14f2:	24 2b       	or	r18, r20
    14f4:	25 2b       	or	r18, r21
    14f6:	21 f4       	brne	.+8      	; 0x1500 <__fp_cmp+0x3e>
    14f8:	08 95       	ret
    14fa:	0a 26       	eor	r0, r26
    14fc:	09 f4       	brne	.+2      	; 0x1500 <__fp_cmp+0x3e>
    14fe:	a1 40       	sbci	r26, 0x01	; 1
    1500:	a6 95       	lsr	r26
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	81 1d       	adc	r24, r1
    1506:	81 1d       	adc	r24, r1
    1508:	08 95       	ret

0000150a <__fp_inf>:
    150a:	97 f9       	bld	r25, 7
    150c:	9f 67       	ori	r25, 0x7F	; 127
    150e:	80 e8       	ldi	r24, 0x80	; 128
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	08 95       	ret

00001516 <__fp_nan>:
    1516:	9f ef       	ldi	r25, 0xFF	; 255
    1518:	80 ec       	ldi	r24, 0xC0	; 192
    151a:	08 95       	ret

0000151c <__fp_pscA>:
    151c:	00 24       	eor	r0, r0
    151e:	0a 94       	dec	r0
    1520:	16 16       	cp	r1, r22
    1522:	17 06       	cpc	r1, r23
    1524:	18 06       	cpc	r1, r24
    1526:	09 06       	cpc	r0, r25
    1528:	08 95       	ret

0000152a <__fp_pscB>:
    152a:	00 24       	eor	r0, r0
    152c:	0a 94       	dec	r0
    152e:	12 16       	cp	r1, r18
    1530:	13 06       	cpc	r1, r19
    1532:	14 06       	cpc	r1, r20
    1534:	05 06       	cpc	r0, r21
    1536:	08 95       	ret

00001538 <__fp_round>:
    1538:	09 2e       	mov	r0, r25
    153a:	03 94       	inc	r0
    153c:	00 0c       	add	r0, r0
    153e:	11 f4       	brne	.+4      	; 0x1544 <__fp_round+0xc>
    1540:	88 23       	and	r24, r24
    1542:	52 f0       	brmi	.+20     	; 0x1558 <__fp_round+0x20>
    1544:	bb 0f       	add	r27, r27
    1546:	40 f4       	brcc	.+16     	; 0x1558 <__fp_round+0x20>
    1548:	bf 2b       	or	r27, r31
    154a:	11 f4       	brne	.+4      	; 0x1550 <__fp_round+0x18>
    154c:	60 ff       	sbrs	r22, 0
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <__fp_round+0x20>
    1550:	6f 5f       	subi	r22, 0xFF	; 255
    1552:	7f 4f       	sbci	r23, 0xFF	; 255
    1554:	8f 4f       	sbci	r24, 0xFF	; 255
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	08 95       	ret

0000155a <__fp_split3>:
    155a:	57 fd       	sbrc	r21, 7
    155c:	90 58       	subi	r25, 0x80	; 128
    155e:	44 0f       	add	r20, r20
    1560:	55 1f       	adc	r21, r21
    1562:	59 f0       	breq	.+22     	; 0x157a <__fp_splitA+0x10>
    1564:	5f 3f       	cpi	r21, 0xFF	; 255
    1566:	71 f0       	breq	.+28     	; 0x1584 <__fp_splitA+0x1a>
    1568:	47 95       	ror	r20

0000156a <__fp_splitA>:
    156a:	88 0f       	add	r24, r24
    156c:	97 fb       	bst	r25, 7
    156e:	99 1f       	adc	r25, r25
    1570:	61 f0       	breq	.+24     	; 0x158a <__fp_splitA+0x20>
    1572:	9f 3f       	cpi	r25, 0xFF	; 255
    1574:	79 f0       	breq	.+30     	; 0x1594 <__fp_splitA+0x2a>
    1576:	87 95       	ror	r24
    1578:	08 95       	ret
    157a:	12 16       	cp	r1, r18
    157c:	13 06       	cpc	r1, r19
    157e:	14 06       	cpc	r1, r20
    1580:	55 1f       	adc	r21, r21
    1582:	f2 cf       	rjmp	.-28     	; 0x1568 <__fp_split3+0xe>
    1584:	46 95       	lsr	r20
    1586:	f1 df       	rcall	.-30     	; 0x156a <__fp_splitA>
    1588:	08 c0       	rjmp	.+16     	; 0x159a <__fp_splitA+0x30>
    158a:	16 16       	cp	r1, r22
    158c:	17 06       	cpc	r1, r23
    158e:	18 06       	cpc	r1, r24
    1590:	99 1f       	adc	r25, r25
    1592:	f1 cf       	rjmp	.-30     	; 0x1576 <__fp_splitA+0xc>
    1594:	86 95       	lsr	r24
    1596:	71 05       	cpc	r23, r1
    1598:	61 05       	cpc	r22, r1
    159a:	08 94       	sec
    159c:	08 95       	ret

0000159e <__fp_zero>:
    159e:	e8 94       	clt

000015a0 <__fp_szero>:
    15a0:	bb 27       	eor	r27, r27
    15a2:	66 27       	eor	r22, r22
    15a4:	77 27       	eor	r23, r23
    15a6:	cb 01       	movw	r24, r22
    15a8:	97 f9       	bld	r25, 7
    15aa:	08 95       	ret

000015ac <__gesf2>:
    15ac:	8a df       	rcall	.-236    	; 0x14c2 <__fp_cmp>
    15ae:	08 f4       	brcc	.+2      	; 0x15b2 <__gesf2+0x6>
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
    15b2:	08 95       	ret

000015b4 <__mulsf3>:
    15b4:	0b d0       	rcall	.+22     	; 0x15cc <__mulsf3x>
    15b6:	c0 cf       	rjmp	.-128    	; 0x1538 <__fp_round>
    15b8:	b1 df       	rcall	.-158    	; 0x151c <__fp_pscA>
    15ba:	28 f0       	brcs	.+10     	; 0x15c6 <__mulsf3+0x12>
    15bc:	b6 df       	rcall	.-148    	; 0x152a <__fp_pscB>
    15be:	18 f0       	brcs	.+6      	; 0x15c6 <__mulsf3+0x12>
    15c0:	95 23       	and	r25, r21
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <__mulsf3+0x12>
    15c4:	a2 cf       	rjmp	.-188    	; 0x150a <__fp_inf>
    15c6:	a7 cf       	rjmp	.-178    	; 0x1516 <__fp_nan>
    15c8:	11 24       	eor	r1, r1
    15ca:	ea cf       	rjmp	.-44     	; 0x15a0 <__fp_szero>

000015cc <__mulsf3x>:
    15cc:	c6 df       	rcall	.-116    	; 0x155a <__fp_split3>
    15ce:	a0 f3       	brcs	.-24     	; 0x15b8 <__mulsf3+0x4>

000015d0 <__mulsf3_pse>:
    15d0:	95 9f       	mul	r25, r21
    15d2:	d1 f3       	breq	.-12     	; 0x15c8 <__mulsf3+0x14>
    15d4:	95 0f       	add	r25, r21
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	55 1f       	adc	r21, r21
    15da:	62 9f       	mul	r22, r18
    15dc:	f0 01       	movw	r30, r0
    15de:	72 9f       	mul	r23, r18
    15e0:	bb 27       	eor	r27, r27
    15e2:	f0 0d       	add	r31, r0
    15e4:	b1 1d       	adc	r27, r1
    15e6:	63 9f       	mul	r22, r19
    15e8:	aa 27       	eor	r26, r26
    15ea:	f0 0d       	add	r31, r0
    15ec:	b1 1d       	adc	r27, r1
    15ee:	aa 1f       	adc	r26, r26
    15f0:	64 9f       	mul	r22, r20
    15f2:	66 27       	eor	r22, r22
    15f4:	b0 0d       	add	r27, r0
    15f6:	a1 1d       	adc	r26, r1
    15f8:	66 1f       	adc	r22, r22
    15fa:	82 9f       	mul	r24, r18
    15fc:	22 27       	eor	r18, r18
    15fe:	b0 0d       	add	r27, r0
    1600:	a1 1d       	adc	r26, r1
    1602:	62 1f       	adc	r22, r18
    1604:	73 9f       	mul	r23, r19
    1606:	b0 0d       	add	r27, r0
    1608:	a1 1d       	adc	r26, r1
    160a:	62 1f       	adc	r22, r18
    160c:	83 9f       	mul	r24, r19
    160e:	a0 0d       	add	r26, r0
    1610:	61 1d       	adc	r22, r1
    1612:	22 1f       	adc	r18, r18
    1614:	74 9f       	mul	r23, r20
    1616:	33 27       	eor	r19, r19
    1618:	a0 0d       	add	r26, r0
    161a:	61 1d       	adc	r22, r1
    161c:	23 1f       	adc	r18, r19
    161e:	84 9f       	mul	r24, r20
    1620:	60 0d       	add	r22, r0
    1622:	21 1d       	adc	r18, r1
    1624:	82 2f       	mov	r24, r18
    1626:	76 2f       	mov	r23, r22
    1628:	6a 2f       	mov	r22, r26
    162a:	11 24       	eor	r1, r1
    162c:	9f 57       	subi	r25, 0x7F	; 127
    162e:	50 40       	sbci	r21, 0x00	; 0
    1630:	8a f0       	brmi	.+34     	; 0x1654 <__mulsf3_pse+0x84>
    1632:	e1 f0       	breq	.+56     	; 0x166c <__mulsf3_pse+0x9c>
    1634:	88 23       	and	r24, r24
    1636:	4a f0       	brmi	.+18     	; 0x164a <__mulsf3_pse+0x7a>
    1638:	ee 0f       	add	r30, r30
    163a:	ff 1f       	adc	r31, r31
    163c:	bb 1f       	adc	r27, r27
    163e:	66 1f       	adc	r22, r22
    1640:	77 1f       	adc	r23, r23
    1642:	88 1f       	adc	r24, r24
    1644:	91 50       	subi	r25, 0x01	; 1
    1646:	50 40       	sbci	r21, 0x00	; 0
    1648:	a9 f7       	brne	.-22     	; 0x1634 <__mulsf3_pse+0x64>
    164a:	9e 3f       	cpi	r25, 0xFE	; 254
    164c:	51 05       	cpc	r21, r1
    164e:	70 f0       	brcs	.+28     	; 0x166c <__mulsf3_pse+0x9c>
    1650:	5c cf       	rjmp	.-328    	; 0x150a <__fp_inf>
    1652:	a6 cf       	rjmp	.-180    	; 0x15a0 <__fp_szero>
    1654:	5f 3f       	cpi	r21, 0xFF	; 255
    1656:	ec f3       	brlt	.-6      	; 0x1652 <__mulsf3_pse+0x82>
    1658:	98 3e       	cpi	r25, 0xE8	; 232
    165a:	dc f3       	brlt	.-10     	; 0x1652 <__mulsf3_pse+0x82>
    165c:	86 95       	lsr	r24
    165e:	77 95       	ror	r23
    1660:	67 95       	ror	r22
    1662:	b7 95       	ror	r27
    1664:	f7 95       	ror	r31
    1666:	e7 95       	ror	r30
    1668:	9f 5f       	subi	r25, 0xFF	; 255
    166a:	c1 f7       	brne	.-16     	; 0x165c <__mulsf3_pse+0x8c>
    166c:	fe 2b       	or	r31, r30
    166e:	88 0f       	add	r24, r24
    1670:	91 1d       	adc	r25, r1
    1672:	96 95       	lsr	r25
    1674:	87 95       	ror	r24
    1676:	97 f9       	bld	r25, 7
    1678:	08 95       	ret

0000167a <__udivmodhi4>:
    167a:	aa 1b       	sub	r26, r26
    167c:	bb 1b       	sub	r27, r27
    167e:	51 e1       	ldi	r21, 0x11	; 17
    1680:	07 c0       	rjmp	.+14     	; 0x1690 <__udivmodhi4_ep>

00001682 <__udivmodhi4_loop>:
    1682:	aa 1f       	adc	r26, r26
    1684:	bb 1f       	adc	r27, r27
    1686:	a6 17       	cp	r26, r22
    1688:	b7 07       	cpc	r27, r23
    168a:	10 f0       	brcs	.+4      	; 0x1690 <__udivmodhi4_ep>
    168c:	a6 1b       	sub	r26, r22
    168e:	b7 0b       	sbc	r27, r23

00001690 <__udivmodhi4_ep>:
    1690:	88 1f       	adc	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	5a 95       	dec	r21
    1696:	a9 f7       	brne	.-22     	; 0x1682 <__udivmodhi4_loop>
    1698:	80 95       	com	r24
    169a:	90 95       	com	r25
    169c:	bc 01       	movw	r22, r24
    169e:	cd 01       	movw	r24, r26
    16a0:	08 95       	ret

000016a2 <__tablejump2__>:
    16a2:	ee 0f       	add	r30, r30
    16a4:	ff 1f       	adc	r31, r31

000016a6 <__tablejump__>:
    16a6:	05 90       	lpm	r0, Z+
    16a8:	f4 91       	lpm	r31, Z
    16aa:	e0 2d       	mov	r30, r0
    16ac:	09 94       	ijmp

000016ae <__umulhisi3>:
    16ae:	a2 9f       	mul	r26, r18
    16b0:	b0 01       	movw	r22, r0
    16b2:	b3 9f       	mul	r27, r19
    16b4:	c0 01       	movw	r24, r0
    16b6:	a3 9f       	mul	r26, r19
    16b8:	70 0d       	add	r23, r0
    16ba:	81 1d       	adc	r24, r1
    16bc:	11 24       	eor	r1, r1
    16be:	91 1d       	adc	r25, r1
    16c0:	b2 9f       	mul	r27, r18
    16c2:	70 0d       	add	r23, r0
    16c4:	81 1d       	adc	r24, r1
    16c6:	11 24       	eor	r1, r1
    16c8:	91 1d       	adc	r25, r1
    16ca:	08 95       	ret

000016cc <_exit>:
    16cc:	f8 94       	cli

000016ce <__stop_program>:
    16ce:	ff cf       	rjmp	.-2      	; 0x16ce <__stop_program>
